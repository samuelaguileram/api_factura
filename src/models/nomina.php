<?php

// This is a autogenerated file:Nomina

class Nomina {
    private ?string $grupo; // json:grupo Optional
    private ?string $fechaPago; // json:fecha_pago Optional
    private ?int $numDias; // json:num_dias Optional
    private ?string $inicial; // json:inicial Optional
    private ?string $final; // json:final Optional
    private ?string $tipoNomina; // json:tipo_nomina Optional
    private ?string $descripcion; // json:descripcion Optional
    private ?int $serie; // json:serie Optional
    private ?string $concepto; // json:concepto Optional
    private ?string $identificador; // json:identificador Optional
    private ?string $versionCfdi; // json:version_cfdi Optional
    private ?bool $sendEmail; // json:sendEmail Optional
    private ?array $registros; // json:registros Optional

    /**
     * @param string|null $grupo
     * @param string|null $fechaPago
     * @param int|null $numDias
     * @param string|null $inicial
     * @param string|null $final
     * @param string|null $tipoNomina
     * @param string|null $descripcion
     * @param int|null $serie
     * @param string|null $concepto
     * @param string|null $identificador
     * @param string|null $versionCfdi
     * @param bool|null $sendEmail
     * @param array|null $registros
     */
    public function __construct(?string $grupo, ?string $fechaPago, ?int $numDias, ?string $inicial, ?string $final, ?string $tipoNomina, ?string $descripcion, ?int $serie, ?string $concepto, ?string $identificador, ?string $versionCfdi, ?bool $sendEmail, ?array $registros) {
        $this->grupo = $grupo;
        $this->fechaPago = $fechaPago;
        $this->numDias = $numDias;
        $this->inicial = $inicial;
        $this->final = $final;
        $this->tipoNomina = $tipoNomina;
        $this->descripcion = $descripcion;
        $this->serie = $serie;
        $this->concepto = $concepto;
        $this->identificador = $identificador;
        $this->versionCfdi = $versionCfdi;
        $this->sendEmail = $sendEmail;
        $this->registros = $registros;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromGrupo(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toGrupo(): ?string {
        if (Nomina::validateGrupo($this->grupo))  {
            if (!is_null($this->grupo)) {
                return $this->grupo; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::grupo');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateGrupo(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::grupo");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getGrupo(): ?string {
        return $this->grupo;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setGrupo(?string $value) {
        if (Nomina::validateGrupo($value))  {
            $this->grupo = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleGrupo(): ?string {
        return 'Nomina::grupo::31'; /*31:grupo*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromFechaPago(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toFechaPago(): ?string {
        if (Nomina::validateFechaPago($this->fechaPago))  {
            if (!is_null($this->fechaPago)) {
                return $this->fechaPago; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::fechaPago');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateFechaPago(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::fechaPago");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getFechaPago(): ?string {
        return $this->fechaPago;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setFechaPago(?string $value) {
        if (Nomina::validateFechaPago($value))  {
            $this->fechaPago = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleFechaPago(): ?string {
        return 'Nomina::fechaPago::32'; /*32:fechaPago*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromNumDias(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toNumDias(): ?int {
        if (Nomina::validateNumDias($this->numDias))  {
            if (!is_null($this->numDias)) {
                return $this->numDias; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::numDias');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateNumDias(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:Nomina::numDias");
            }
        }
        return true;
    }

    /**
     * @return ?int
     */
    public function getNumDias(): ?int {
        return $this->numDias;
    }

    /**
     * @param int|null
     * @throws Exception
     */
    public function setNumDias(?int $value) {
        if (Nomina::validateNumDias($value))  {
            $this->numDias = $value;
        }
    }

    /**
     * @return ?int
     */
    public static function sampleNumDias(): ?int {
        return 33; /*33:numDias*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromInicial(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toInicial(): ?string {
        if (Nomina::validateInicial($this->inicial))  {
            if (!is_null($this->inicial)) {
                return $this->inicial; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::inicial');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateInicial(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::inicial");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getInicial(): ?string {
        return $this->inicial;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setInicial(?string $value) {
        if (Nomina::validateInicial($value))  {
            $this->inicial = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleInicial(): ?string {
        return 'Nomina::inicial::34'; /*34:inicial*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromFinal(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toFinal(): ?string {
        if (Nomina::validateFinal($this->final))  {
            if (!is_null($this->final)) {
                return $this->final; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::final');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateFinal(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::final");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getFinal(): ?string {
        return $this->final;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setFinal(?string $value) {
        if (Nomina::validateFinal($value))  {
            $this->final = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleFinal(): ?string {
        return 'Nomina::final::35'; /*35:final*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipoNomina(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipoNomina(): ?string {
        if (Nomina::validateTipoNomina($this->tipoNomina))  {
            if (!is_null($this->tipoNomina)) {
                return $this->tipoNomina; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::tipoNomina');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipoNomina(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::tipoNomina");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipoNomina(): ?string {
        return $this->tipoNomina;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipoNomina(?string $value) {
        if (Nomina::validateTipoNomina($value))  {
            $this->tipoNomina = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipoNomina(): ?string {
        return 'Nomina::tipoNomina::36'; /*36:tipoNomina*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDescripcion(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDescripcion(): ?string {
        if (Nomina::validateDescripcion($this->descripcion))  {
            if (!is_null($this->descripcion)) {
                return $this->descripcion; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::descripcion');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDescripcion(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::descripcion");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDescripcion(): ?string {
        return $this->descripcion;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDescripcion(?string $value) {
        if (Nomina::validateDescripcion($value))  {
            $this->descripcion = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDescripcion(): ?string {
        return 'Nomina::descripcion::37'; /*37:descripcion*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromSerie(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toSerie(): ?int {
        if (Nomina::validateSerie($this->serie))  {
            if (!is_null($this->serie)) {
                return $this->serie; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::serie');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateSerie(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:Nomina::serie");
            }
        }
        return true;
    }

    /**
     * @return ?int
     */
    public function getSerie(): ?int {
        return $this->serie;
    }

    /**
     * @param int|null
     * @throws Exception
     */
    public function setSerie(?int $value) {
        if (Nomina::validateSerie($value))  {
            $this->serie = $value;
        }
    }

    /**
     * @return ?int
     */
    public static function sampleSerie(): ?int {
        return 38; /*38:serie*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromConcepto(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toConcepto(): ?string {
        if (Nomina::validateConcepto($this->concepto))  {
            if (!is_null($this->concepto)) {
                return $this->concepto; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::concepto');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateConcepto(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::concepto");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getConcepto(): ?string {
        return $this->concepto;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setConcepto(?string $value) {
        if (Nomina::validateConcepto($value))  {
            $this->concepto = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleConcepto(): ?string {
        return 'Nomina::concepto::39'; /*39:concepto*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromIdentificador(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toIdentificador(): ?string {
        if (Nomina::validateIdentificador($this->identificador))  {
            if (!is_null($this->identificador)) {
                return $this->identificador; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::identificador');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateIdentificador(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::identificador");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getIdentificador(): ?string {
        return $this->identificador;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setIdentificador(?string $value) {
        if (Nomina::validateIdentificador($value))  {
            $this->identificador = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleIdentificador(): ?string {
        return 'Nomina::identificador::40'; /*40:identificador*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromVersionCfdi(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toVersionCfdi(): ?string {
        if (Nomina::validateVersionCfdi($this->versionCfdi))  {
            if (!is_null($this->versionCfdi)) {
                return $this->versionCfdi; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::versionCfdi');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateVersionCfdi(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Nomina::versionCfdi");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getVersionCfdi(): ?string {
        return $this->versionCfdi;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setVersionCfdi(?string $value) {
        if (Nomina::validateVersionCfdi($value))  {
            $this->versionCfdi = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleVersionCfdi(): ?string {
        return 'Nomina::versionCfdi::41'; /*41:versionCfdi*/
    }

    /**
     * @param ?bool $value
     * @throws Exception
     * @return ?bool
     */
    public static function fromSendEmail(?bool $value): ?bool {
        if (!is_null($value)) {
            return $value; /*bool*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?bool
     */
    public function toSendEmail(): ?bool {
        if (Nomina::validateSendEmail($this->sendEmail))  {
            if (!is_null($this->sendEmail)) {
                return $this->sendEmail; /*bool*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::sendEmail');
    }

    /**
     * @param bool|null
     * @return bool
     * @throws Exception
     */
    public static function validateSendEmail(?bool $value): bool {
        if (!is_null($value)) {
            if (!is_bool($value)) {
                throw new Exception("Attribute Error:Nomina::sendEmail");
            }
        }
        return true;
    }

    /**
     * @return ?bool
     */
    public function getSendEmail(): ?bool {
        return $this->sendEmail;
    }

    /**
     * @param bool|null
     * @throws Exception
     */
    public function setSendEmail(?bool $value) {
        if (Nomina::validateSendEmail($value))  {
            $this->sendEmail = $value;
        }
    }

    /**
     * @return ?bool
     */
    public static function sampleSendEmail(): ?bool {
        return true; /*42:sendEmail*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromRegistros(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Registro::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toRegistros(): ?array {
        if (Nomina::validateRegistros($this->registros))  {
            if (!is_null($this->registros)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->registros);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Nomina::registros');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateRegistros(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Nomina::registros");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getRegistros(): ?array {
        return $this->registros;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setRegistros(?array $value) {
        if (Nomina::validateRegistros($value))  {
            $this->registros = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleRegistros(): ?array {
        return  array(
            Registro::sample() /*43:*/
        ); /* 43:registros*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Nomina::validateGrupo($this->grupo)
        || Nomina::validateFechaPago($this->fechaPago)
        || Nomina::validateNumDias($this->numDias)
        || Nomina::validateInicial($this->inicial)
        || Nomina::validateFinal($this->final)
        || Nomina::validateTipoNomina($this->tipoNomina)
        || Nomina::validateDescripcion($this->descripcion)
        || Nomina::validateSerie($this->serie)
        || Nomina::validateConcepto($this->concepto)
        || Nomina::validateIdentificador($this->identificador)
        || Nomina::validateVersionCfdi($this->versionCfdi)
        || Nomina::validateSendEmail($this->sendEmail)
        || Nomina::validateRegistros($this->registros);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'grupo'} = $this->toGrupo();
        $out->{'fecha_pago'} = $this->toFechaPago();
        $out->{'num_dias'} = $this->toNumDias();
        $out->{'inicial'} = $this->toInicial();
        $out->{'final'} = $this->toFinal();
        $out->{'tipo_nomina'} = $this->toTipoNomina();
        $out->{'descripcion'} = $this->toDescripcion();
        $out->{'serie'} = $this->toSerie();
        $out->{'concepto'} = $this->toConcepto();
        $out->{'identificador'} = $this->toIdentificador();
        $out->{'version_cfdi'} = $this->toVersionCfdi();
        $out->{'sendEmail'} = $this->toSendEmail();
        $out->{'registros'} = $this->toRegistros();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Nomina
     * @throws Exception
     */
    public function from(stdClass $obj): Nomina {
        Nomina::validateGrupo($this->grupo, true);
        Nomina::validateFechaPago($this->fechaPago, true);
        Nomina::validateNumDias($this->numDias, true);
        Nomina::validateInicial($this->inicial, true);
        Nomina::validateFinal($this->final, true);
        Nomina::validateTipoNomina($this->tipoNomina, true);
        Nomina::validateDescripcion($this->descripcion, true);
        Nomina::validateSerie($this->serie, true);
        Nomina::validateConcepto($this->concepto, true);
        Nomina::validateIdentificador($this->identificador, true);
        Nomina::validateVersionCfdi($this->versionCfdi, true);
        Nomina::validateSendEmail($this->sendEmail, true);
        Nomina::validateRegistros($this->registros, true);
        return new Nomina(
         Nomina::fromGrupo($obj->{'grupo'})
        ,Nomina::fromFechaPago($obj->{'fecha_pago'})
        ,Nomina::fromNumDias($obj->{'num_dias'})
        ,Nomina::fromInicial($obj->{'inicial'})
        ,Nomina::fromFinal($obj->{'final'})
        ,Nomina::fromTipoNomina($obj->{'tipo_nomina'})
        ,Nomina::fromDescripcion($obj->{'descripcion'})
        ,Nomina::fromSerie($obj->{'serie'})
        ,Nomina::fromConcepto($obj->{'concepto'})
        ,Nomina::fromIdentificador($obj->{'identificador'})
        ,Nomina::fromVersionCfdi($obj->{'version_cfdi'})
        ,Nomina::fromSendEmail($obj->{'sendEmail'})
        ,Nomina::fromRegistros($obj->{'registros'})
        );
    }

    /**
     * @return Nomina
     */
    public static function sample(): Nomina {
        return new Nomina(
         Nomina::sampleGrupo()
        ,Nomina::sampleFechaPago()
        ,Nomina::sampleNumDias()
        ,Nomina::sampleInicial()
        ,Nomina::sampleFinal()
        ,Nomina::sampleTipoNomina()
        ,Nomina::sampleDescripcion()
        ,Nomina::sampleSerie()
        ,Nomina::sampleConcepto()
        ,Nomina::sampleIdentificador()
        ,Nomina::sampleVersionCfdi()
        ,Nomina::sampleSendEmail()
        ,Nomina::sampleRegistros()
        );
    }
}

// This is a autogenerated file:Registro

class Registro {
    private ?string $empleadoUid; // json:empleado_uid Optional
    private ?Data $data; // json:data Optional
    private ?string $diasPagados; // json:dias_pagados Optional
    private ?array $percepciones; // json:percepciones Optional
    private ?array $deducciones; // json:deducciones Optional
    private ?array $otrospagos; // json:otrospagos Optional

    /**
     * @param string|null $empleadoUid
     * @param Data|null $data
     * @param string|null $diasPagados
     * @param array|null $percepciones
     * @param array|null $deducciones
     * @param array|null $otrospagos
     */
    public function __construct(?string $empleadoUid, ?Data $data, ?string $diasPagados, ?array $percepciones, ?array $deducciones, ?array $otrospagos) {
        $this->empleadoUid = $empleadoUid;
        $this->data = $data;
        $this->diasPagados = $diasPagados;
        $this->percepciones = $percepciones;
        $this->deducciones = $deducciones;
        $this->otrospagos = $otrospagos;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromEmpleadoUid(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toEmpleadoUid(): ?string {
        if (Registro::validateEmpleadoUid($this->empleadoUid))  {
            if (!is_null($this->empleadoUid)) {
                return $this->empleadoUid; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::empleadoUid');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateEmpleadoUid(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Registro::empleadoUid");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getEmpleadoUid(): ?string {
        return $this->empleadoUid;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setEmpleadoUid(?string $value) {
        if (Registro::validateEmpleadoUid($value))  {
            $this->empleadoUid = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleEmpleadoUid(): ?string {
        return 'Registro::empleadoUid::31'; /*31:empleadoUid*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?Data
     */
    public static function fromData(?stdClass $value): ?Data {
        if (!is_null($value)) {
            return Data::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toData(): ?stdClass {
        if (Registro::validateData($this->data))  {
            if (!is_null($this->data)) {
                return $this->data->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::data');
    }

    /**
     * @param Data|null
     * @return bool
     * @throws Exception
     */
    public static function validateData(?Data $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @return ?Data
     */
    public function getData(): ?Data {
        return $this->data;
    }

    /**
     * @param Data|null
     * @throws Exception
     */
    public function setData(?Data $value) {
        if (Registro::validateData($value))  {
            $this->data = $value;
        }
    }

    /**
     * @return ?Data
     */
    public static function sampleData(): ?Data {
        return Data::sample(); /*32:data*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDiasPagados(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDiasPagados(): ?string {
        if (Registro::validateDiasPagados($this->diasPagados))  {
            if (!is_null($this->diasPagados)) {
                return $this->diasPagados; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::diasPagados');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDiasPagados(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Registro::diasPagados");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDiasPagados(): ?string {
        return $this->diasPagados;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDiasPagados(?string $value) {
        if (Registro::validateDiasPagados($value))  {
            $this->diasPagados = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDiasPagados(): ?string {
        return 'Registro::diasPagados::33'; /*33:diasPagados*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromPercepciones(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Percepcione::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toPercepciones(): ?array {
        if (Registro::validatePercepciones($this->percepciones))  {
            if (!is_null($this->percepciones)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->percepciones);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::percepciones');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validatePercepciones(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Registro::percepciones");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getPercepciones(): ?array {
        return $this->percepciones;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setPercepciones(?array $value) {
        if (Registro::validatePercepciones($value))  {
            $this->percepciones = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function samplePercepciones(): ?array {
        return  array(
            Percepcione::sample() /*34:*/
        ); /* 34:percepciones*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromDeducciones(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Deduccione::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toDeducciones(): ?array {
        if (Registro::validateDeducciones($this->deducciones))  {
            if (!is_null($this->deducciones)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->deducciones);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::deducciones');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateDeducciones(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Registro::deducciones");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getDeducciones(): ?array {
        return $this->deducciones;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setDeducciones(?array $value) {
        if (Registro::validateDeducciones($value))  {
            $this->deducciones = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleDeducciones(): ?array {
        return  array(
            Deduccione::sample() /*35:*/
        ); /* 35:deducciones*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromOtrospagos(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Deduccione::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toOtrospagos(): ?array {
        if (Registro::validateOtrospagos($this->otrospagos))  {
            if (!is_null($this->otrospagos)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->otrospagos);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Registro::otrospagos');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateOtrospagos(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Registro::otrospagos");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getOtrospagos(): ?array {
        return $this->otrospagos;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setOtrospagos(?array $value) {
        if (Registro::validateOtrospagos($value))  {
            $this->otrospagos = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleOtrospagos(): ?array {
        return  array(
            Deduccione::sample() /*36:*/
        ); /* 36:otrospagos*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Registro::validateEmpleadoUid($this->empleadoUid)
        || Registro::validateData($this->data)
        || Registro::validateDiasPagados($this->diasPagados)
        || Registro::validatePercepciones($this->percepciones)
        || Registro::validateDeducciones($this->deducciones)
        || Registro::validateOtrospagos($this->otrospagos);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'empleado_uid'} = $this->toEmpleadoUid();
        $out->{'data'} = $this->toData();
        $out->{'dias_pagados'} = $this->toDiasPagados();
        $out->{'percepciones'} = $this->toPercepciones();
        $out->{'deducciones'} = $this->toDeducciones();
        $out->{'otrospagos'} = $this->toOtrospagos();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Registro
     * @throws Exception
     */
    public function from(stdClass $obj): Registro {
        Registro::validateEmpleadoUid($this->empleadoUid, true);
        Registro::validateData($this->data, true);
        Registro::validateDiasPagados($this->diasPagados, true);
        Registro::validatePercepciones($this->percepciones, true);
        Registro::validateDeducciones($this->deducciones, true);
        Registro::validateOtrospagos($this->otrospagos, true);
        return new Registro(
         Registro::fromEmpleadoUid($obj->{'empleado_uid'})
        ,Registro::fromData($obj->{'data'})
        ,Registro::fromDiasPagados($obj->{'dias_pagados'})
        ,Registro::fromPercepciones($obj->{'percepciones'})
        ,Registro::fromDeducciones($obj->{'deducciones'})
        ,Registro::fromOtrospagos($obj->{'otrospagos'})
        );
    }

    /**
     * @return Registro
     */
    public static function sample(): Registro {
        return new Registro(
         Registro::sampleEmpleadoUid()
        ,Registro::sampleData()
        ,Registro::sampleDiasPagados()
        ,Registro::samplePercepciones()
        ,Registro::sampleDeducciones()
        ,Registro::sampleOtrospagos()
        );
    }
}

// This is a autogenerated file:Data

class Data {
    private ?string $dias; // json:dias Optional
    private ?string $id; // json:id Optional

    /**
     * @param string|null $dias
     * @param string|null $id
     */
    public function __construct(?string $dias, ?string $id) {
        $this->dias = $dias;
        $this->id = $id;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDias(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDias(): ?string {
        if (Data::validateDias($this->dias))  {
            if (!is_null($this->dias)) {
                return $this->dias; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Data::dias');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDias(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Data::dias");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDias(): ?string {
        return $this->dias;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDias(?string $value) {
        if (Data::validateDias($value))  {
            $this->dias = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDias(): ?string {
        return 'Data::dias::31'; /*31:dias*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromID(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toID(): ?string {
        if (Data::validateID($this->id))  {
            if (!is_null($this->id)) {
                return $this->id; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Data::id');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateID(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Data::id");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getID(): ?string {
        return $this->id;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setID(?string $value) {
        if (Data::validateID($value))  {
            $this->id = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleID(): ?string {
        return 'Data::id::32'; /*32:id*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Data::validateDias($this->dias)
        || Data::validateID($this->id);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'dias'} = $this->toDias();
        $out->{'id'} = $this->toID();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Data
     * @throws Exception
     */
    public function from(stdClass $obj): Data {
        Data::validateDias($this->dias, true);
        Data::validateID($this->id, true);
        return new Data(
         Data::fromDias($obj->{'dias'})
        ,Data::fromID($obj->{'id'})
        );
    }

    /**
     * @return Data
     */
    public static function sample(): Data {
        return new Data(
         Data::sampleDias()
        ,Data::sampleID()
        );
    }
}

// This is a autogenerated file:Deduccione

class Deduccione {
    private ?string $tipo; // json:tipo Optional
    private ?string $clave; // json:clave Optional
    private ?string $importe; // json:importe Optional
    private ?string $descripcion; // json:descripcion Optional
    private ?SubsidioAlEmpleo $subsidioAlEmpleo; // json:SubsidioAlEmpleo Optional

    /**
     * @param string|null $tipo
     * @param string|null $clave
     * @param string|null $importe
     * @param string|null $descripcion
     * @param SubsidioAlEmpleo|null $subsidioAlEmpleo
     */
    public function __construct(?string $tipo, ?string $clave, ?string $importe, ?string $descripcion, ?SubsidioAlEmpleo $subsidioAlEmpleo) {
        $this->tipo = $tipo;
        $this->clave = $clave;
        $this->importe = $importe;
        $this->descripcion = $descripcion;
        $this->subsidioAlEmpleo = $subsidioAlEmpleo;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipo(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipo(): ?string {
        if (Deduccione::validateTipo($this->tipo))  {
            if (!is_null($this->tipo)) {
                return $this->tipo; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Deduccione::tipo');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipo(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Deduccione::tipo");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipo(): ?string {
        return $this->tipo;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipo(?string $value) {
        if (Deduccione::validateTipo($value))  {
            $this->tipo = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipo(): ?string {
        return 'Deduccione::tipo::31'; /*31:tipo*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromClave(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toClave(): ?string {
        if (Deduccione::validateClave($this->clave))  {
            if (!is_null($this->clave)) {
                return $this->clave; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Deduccione::clave');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateClave(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Deduccione::clave");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getClave(): ?string {
        return $this->clave;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setClave(?string $value) {
        if (Deduccione::validateClave($value))  {
            $this->clave = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleClave(): ?string {
        return 'Deduccione::clave::32'; /*32:clave*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImporte(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImporte(): ?string {
        if (Deduccione::validateImporte($this->importe))  {
            if (!is_null($this->importe)) {
                return $this->importe; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Deduccione::importe');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImporte(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Deduccione::importe");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImporte(): ?string {
        return $this->importe;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImporte(?string $value) {
        if (Deduccione::validateImporte($value))  {
            $this->importe = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImporte(): ?string {
        return 'Deduccione::importe::33'; /*33:importe*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDescripcion(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDescripcion(): ?string {
        if (Deduccione::validateDescripcion($this->descripcion))  {
            if (!is_null($this->descripcion)) {
                return $this->descripcion; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Deduccione::descripcion');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDescripcion(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Deduccione::descripcion");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDescripcion(): ?string {
        return $this->descripcion;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDescripcion(?string $value) {
        if (Deduccione::validateDescripcion($value))  {
            $this->descripcion = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDescripcion(): ?string {
        return 'Deduccione::descripcion::34'; /*34:descripcion*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?SubsidioAlEmpleo
     */
    public static function fromSubsidioAlEmpleo(?stdClass $value): ?SubsidioAlEmpleo {
        if (!is_null($value)) {
            return SubsidioAlEmpleo::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toSubsidioAlEmpleo(): ?stdClass {
        if (Deduccione::validateSubsidioAlEmpleo($this->subsidioAlEmpleo))  {
            if (!is_null($this->subsidioAlEmpleo)) {
                return $this->subsidioAlEmpleo->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Deduccione::subsidioAlEmpleo');
    }

    /**
     * @param SubsidioAlEmpleo|null
     * @return bool
     * @throws Exception
     */
    public static function validateSubsidioAlEmpleo(?SubsidioAlEmpleo $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @return ?SubsidioAlEmpleo
     */
    public function getSubsidioAlEmpleo(): ?SubsidioAlEmpleo {
        return $this->subsidioAlEmpleo;
    }

    /**
     * @param SubsidioAlEmpleo|null
     * @throws Exception
     */
    public function setSubsidioAlEmpleo(?SubsidioAlEmpleo $value) {
        if (Deduccione::validateSubsidioAlEmpleo($value))  {
            $this->subsidioAlEmpleo = $value;
        }
    }

    /**
     * @return ?SubsidioAlEmpleo
     */
    public static function sampleSubsidioAlEmpleo(): ?SubsidioAlEmpleo {
        return SubsidioAlEmpleo::sample(); /*35:subsidioAlEmpleo*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Deduccione::validateTipo($this->tipo)
        || Deduccione::validateClave($this->clave)
        || Deduccione::validateImporte($this->importe)
        || Deduccione::validateDescripcion($this->descripcion)
        || Deduccione::validateSubsidioAlEmpleo($this->subsidioAlEmpleo);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'tipo'} = $this->toTipo();
        $out->{'clave'} = $this->toClave();
        $out->{'importe'} = $this->toImporte();
        $out->{'descripcion'} = $this->toDescripcion();
        $out->{'SubsidioAlEmpleo'} = $this->toSubsidioAlEmpleo();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Deduccione
     * @throws Exception
     */
    public function from(stdClass $obj): Deduccione {
        Deduccione::validateTipo($this->tipo, true);
        Deduccione::validateClave($this->clave, true);
        Deduccione::validateImporte($this->importe, true);
        Deduccione::validateDescripcion($this->descripcion, true);
        Deduccione::validateSubsidioAlEmpleo($this->subsidioAlEmpleo, true);
        return new Deduccione(
         Deduccione::fromTipo($obj->{'tipo'})
        ,Deduccione::fromClave($obj->{'clave'})
        ,Deduccione::fromImporte($obj->{'importe'})
        ,Deduccione::fromDescripcion($obj->{'descripcion'})
        ,Deduccione::fromSubsidioAlEmpleo($obj->{'SubsidioAlEmpleo'})
        );
    }

    /**
     * @return Deduccione
     */
    public static function sample(): Deduccione {
        return new Deduccione(
         Deduccione::sampleTipo()
        ,Deduccione::sampleClave()
        ,Deduccione::sampleImporte()
        ,Deduccione::sampleDescripcion()
        ,Deduccione::sampleSubsidioAlEmpleo()
        );
    }
}

// This is a autogenerated file:SubsidioAlEmpleo

class SubsidioAlEmpleo {
    private ?string $subsidioCausado; // json:SubsidioCausado Optional

    /**
     * @param string|null $subsidioCausado
     */
    public function __construct(?string $subsidioCausado) {
        $this->subsidioCausado = $subsidioCausado;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromSubsidioCausado(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toSubsidioCausado(): ?string {
        if (SubsidioAlEmpleo::validateSubsidioCausado($this->subsidioCausado))  {
            if (!is_null($this->subsidioCausado)) {
                return $this->subsidioCausado; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this SubsidioAlEmpleo::subsidioCausado');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateSubsidioCausado(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:SubsidioAlEmpleo::subsidioCausado");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getSubsidioCausado(): ?string {
        return $this->subsidioCausado;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setSubsidioCausado(?string $value) {
        if (SubsidioAlEmpleo::validateSubsidioCausado($value))  {
            $this->subsidioCausado = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleSubsidioCausado(): ?string {
        return 'SubsidioAlEmpleo::subsidioCausado::31'; /*31:subsidioCausado*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return SubsidioAlEmpleo::validateSubsidioCausado($this->subsidioCausado);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'SubsidioCausado'} = $this->toSubsidioCausado();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return SubsidioAlEmpleo
     * @throws Exception
     */
    public function from(stdClass $obj): SubsidioAlEmpleo {
        SubsidioAlEmpleo::validateSubsidioCausado($this->subsidioCausado, true);
        return new SubsidioAlEmpleo(
         SubsidioAlEmpleo::fromSubsidioCausado($obj->{'SubsidioCausado'})
        );
    }

    /**
     * @return SubsidioAlEmpleo
     */
    public static function sample(): SubsidioAlEmpleo {
        return new SubsidioAlEmpleo(
         SubsidioAlEmpleo::sampleSubsidioCausado()
        );
    }
}

// This is a autogenerated file:Percepcione

class Percepcione {
    private ?string $tipo; // json:tipo Optional
    private ?string $clave; // json:clave Optional
    private ?string $descripcion; // json:descripcion Optional
    private ?string $exento; // json:exento Optional
    private ?string $gravado; // json:gravado Optional

    /**
     * @param string|null $tipo
     * @param string|null $clave
     * @param string|null $descripcion
     * @param string|null $exento
     * @param string|null $gravado
     */
    public function __construct(?string $tipo, ?string $clave, ?string $descripcion, ?string $exento, ?string $gravado) {
        $this->tipo = $tipo;
        $this->clave = $clave;
        $this->descripcion = $descripcion;
        $this->exento = $exento;
        $this->gravado = $gravado;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipo(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipo(): ?string {
        if (Percepcione::validateTipo($this->tipo))  {
            if (!is_null($this->tipo)) {
                return $this->tipo; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Percepcione::tipo');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipo(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Percepcione::tipo");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipo(): ?string {
        return $this->tipo;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipo(?string $value) {
        if (Percepcione::validateTipo($value))  {
            $this->tipo = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipo(): ?string {
        return 'Percepcione::tipo::31'; /*31:tipo*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromClave(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toClave(): ?string {
        if (Percepcione::validateClave($this->clave))  {
            if (!is_null($this->clave)) {
                return $this->clave; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Percepcione::clave');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateClave(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Percepcione::clave");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getClave(): ?string {
        return $this->clave;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setClave(?string $value) {
        if (Percepcione::validateClave($value))  {
            $this->clave = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleClave(): ?string {
        return 'Percepcione::clave::32'; /*32:clave*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDescripcion(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDescripcion(): ?string {
        if (Percepcione::validateDescripcion($this->descripcion))  {
            if (!is_null($this->descripcion)) {
                return $this->descripcion; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Percepcione::descripcion');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDescripcion(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Percepcione::descripcion");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDescripcion(): ?string {
        return $this->descripcion;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDescripcion(?string $value) {
        if (Percepcione::validateDescripcion($value))  {
            $this->descripcion = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDescripcion(): ?string {
        return 'Percepcione::descripcion::33'; /*33:descripcion*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromExento(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toExento(): ?string {
        if (Percepcione::validateExento($this->exento))  {
            if (!is_null($this->exento)) {
                return $this->exento; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Percepcione::exento');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateExento(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Percepcione::exento");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getExento(): ?string {
        return $this->exento;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setExento(?string $value) {
        if (Percepcione::validateExento($value))  {
            $this->exento = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleExento(): ?string {
        return 'Percepcione::exento::34'; /*34:exento*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromGravado(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toGravado(): ?string {
        if (Percepcione::validateGravado($this->gravado))  {
            if (!is_null($this->gravado)) {
                return $this->gravado; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Percepcione::gravado');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateGravado(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Percepcione::gravado");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getGravado(): ?string {
        return $this->gravado;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setGravado(?string $value) {
        if (Percepcione::validateGravado($value))  {
            $this->gravado = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleGravado(): ?string {
        return 'Percepcione::gravado::35'; /*35:gravado*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Percepcione::validateTipo($this->tipo)
        || Percepcione::validateClave($this->clave)
        || Percepcione::validateDescripcion($this->descripcion)
        || Percepcione::validateExento($this->exento)
        || Percepcione::validateGravado($this->gravado);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'tipo'} = $this->toTipo();
        $out->{'clave'} = $this->toClave();
        $out->{'descripcion'} = $this->toDescripcion();
        $out->{'exento'} = $this->toExento();
        $out->{'gravado'} = $this->toGravado();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Percepcione
     * @throws Exception
     */
    public function from(stdClass $obj): Percepcione {
        Percepcione::validateTipo($this->tipo, true);
        Percepcione::validateClave($this->clave, true);
        Percepcione::validateDescripcion($this->descripcion, true);
        Percepcione::validateExento($this->exento, true);
        Percepcione::validateGravado($this->gravado, true);
        return new Percepcione(
         Percepcione::fromTipo($obj->{'tipo'})
        ,Percepcione::fromClave($obj->{'clave'})
        ,Percepcione::fromDescripcion($obj->{'descripcion'})
        ,Percepcione::fromExento($obj->{'exento'})
        ,Percepcione::fromGravado($obj->{'gravado'})
        );
    }

    /**
     * @return Percepcione
     */
    public static function sample(): Percepcione {
        return new Percepcione(
         Percepcione::sampleTipo()
        ,Percepcione::sampleClave()
        ,Percepcione::sampleDescripcion()
        ,Percepcione::sampleExento()
        ,Percepcione::sampleGravado()
        );
    }
}
?>
