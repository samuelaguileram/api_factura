<?php

// This is a autogenerated file:Complemento

class Complemento {
    private ?string $tipoCfdi; // json:TipoCfdi Optional
    private ?int $serie; // json:Serie Optional
    private ?string $fecha; // json:Fecha Optional
    private ?string $usoCFDI; // json:UsoCFDI Optional
    private ?string $moneda; // json:Moneda Optional
    private ?string $enviarCorreo; // json:EnviarCorreo Optional
    private ?Receptor $receptor; // json:Receptor Optional
    private ?array $conceptos; // json:Conceptos Optional
    private ?array $pagos; // json:Pagos Optional

    /**
     * @param string|null $tipoCfdi
     * @param int|null $serie
     * @param string|null $fecha
     * @param string|null $usoCFDI
     * @param string|null $moneda
     * @param string|null $enviarCorreo
     * @param Receptor|null $receptor
     * @param array|null $conceptos
     * @param array|null $pagos
     */
    public function __construct(?string $tipoCfdi, ?int $serie, ?string $fecha, ?string $usoCFDI, ?string $moneda, ?string $enviarCorreo, ?Receptor $receptor, ?array $conceptos, ?array $pagos) {
        $this->tipoCfdi = $tipoCfdi;
        $this->serie = $serie;
        $this->fecha = $fecha;
        $this->usoCFDI = $usoCFDI;
        $this->moneda = $moneda;
        $this->enviarCorreo = $enviarCorreo;
        $this->receptor = $receptor;
        $this->conceptos = $conceptos;
        $this->pagos = $pagos;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipoCfdi(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipoCfdi(): ?string {
        if (Complemento::validateTipoCfdi($this->tipoCfdi))  {
            if (!is_null($this->tipoCfdi)) {
                return $this->tipoCfdi; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::tipoCfdi');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipoCfdi(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Complemento::tipoCfdi");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipoCfdi(): ?string {
        return $this->tipoCfdi;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipoCfdi(?string $value) {
        if (Complemento::validateTipoCfdi($value))  {
            $this->tipoCfdi = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipoCfdi(): ?string {
        return 'Complemento::tipoCfdi::31'; /*31:tipoCfdi*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromSerie(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toSerie(): ?int {
        if (Complemento::validateSerie($this->serie))  {
            if (!is_null($this->serie)) {
                return $this->serie; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::serie');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateSerie(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:Complemento::serie");
            }
        }
        return true;
    }

    /**
     * @return ?int
     */
    public function getSerie(): ?int {
        return $this->serie;
    }

    /**
     * @param int|null
     * @throws Exception
     */
    public function setSerie(?int $value) {
        if (Complemento::validateSerie($value))  {
            $this->serie = $value;
        }
    }

    /**
     * @return ?int
     */
    public static function sampleSerie(): ?int {
        return 32; /*32:serie*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromFecha(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toFecha(): ?string {
        if (Complemento::validateFecha($this->fecha))  {
            if (!is_null($this->fecha)) {
                return $this->fecha; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::fecha');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateFecha(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Complemento::fecha");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getFecha(): ?string {
        return $this->fecha;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setFecha(?string $value) {
        if (Complemento::validateFecha($value))  {
            $this->fecha = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleFecha(): ?string {
        return 'Complemento::fecha::33'; /*33:fecha*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromUsoCFDI(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toUsoCFDI(): ?string {
        if (Complemento::validateUsoCFDI($this->usoCFDI))  {
            if (!is_null($this->usoCFDI)) {
                return $this->usoCFDI; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::usoCFDI');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateUsoCFDI(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Complemento::usoCFDI");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getUsoCFDI(): ?string {
        return $this->usoCFDI;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setUsoCFDI(?string $value) {
        if (Complemento::validateUsoCFDI($value))  {
            $this->usoCFDI = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleUsoCFDI(): ?string {
        return 'Complemento::usoCFDI::34'; /*34:usoCFDI*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromMoneda(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toMoneda(): ?string {
        if (Complemento::validateMoneda($this->moneda))  {
            if (!is_null($this->moneda)) {
                return $this->moneda; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::moneda');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateMoneda(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Complemento::moneda");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getMoneda(): ?string {
        return $this->moneda;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setMoneda(?string $value) {
        if (Complemento::validateMoneda($value))  {
            $this->moneda = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleMoneda(): ?string {
        return 'Complemento::moneda::35'; /*35:moneda*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromEnviarCorreo(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toEnviarCorreo(): ?string {
        if (Complemento::validateEnviarCorreo($this->enviarCorreo))  {
            if (!is_null($this->enviarCorreo)) {
                return $this->enviarCorreo; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::enviarCorreo');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateEnviarCorreo(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Complemento::enviarCorreo");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getEnviarCorreo(): ?string {
        return $this->enviarCorreo;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setEnviarCorreo(?string $value) {
        if (Complemento::validateEnviarCorreo($value))  {
            $this->enviarCorreo = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleEnviarCorreo(): ?string {
        return 'Complemento::enviarCorreo::36'; /*36:enviarCorreo*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?Receptor
     */
    public static function fromReceptor(?stdClass $value): ?Receptor {
        if (!is_null($value)) {
            return Receptor::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toReceptor(): ?stdClass {
        if (Complemento::validateReceptor($this->receptor))  {
            if (!is_null($this->receptor)) {
                return $this->receptor->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::receptor');
    }

    /**
     * @param Receptor|null
     * @return bool
     * @throws Exception
     */
    public static function validateReceptor(?Receptor $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @return ?Receptor
     */
    public function getReceptor(): ?Receptor {
        return $this->receptor;
    }

    /**
     * @param Receptor|null
     * @throws Exception
     */
    public function setReceptor(?Receptor $value) {
        if (Complemento::validateReceptor($value))  {
            $this->receptor = $value;
        }
    }

    /**
     * @return ?Receptor
     */
    public static function sampleReceptor(): ?Receptor {
        return Receptor::sample(); /*37:receptor*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromConceptos(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Concepto::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toConceptos(): ?array {
        if (Complemento::validateConceptos($this->conceptos))  {
            if (!is_null($this->conceptos)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->conceptos);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::conceptos');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateConceptos(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Complemento::conceptos");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getConceptos(): ?array {
        return $this->conceptos;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setConceptos(?array $value) {
        if (Complemento::validateConceptos($value))  {
            $this->conceptos = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleConceptos(): ?array {
        return  array(
            Concepto::sample() /*38:*/
        ); /* 38:conceptos*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromPagos(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Pago::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toPagos(): ?array {
        if (Complemento::validatePagos($this->pagos))  {
            if (!is_null($this->pagos)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->pagos);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Complemento::pagos');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validatePagos(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Complemento::pagos");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getPagos(): ?array {
        return $this->pagos;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setPagos(?array $value) {
        if (Complemento::validatePagos($value))  {
            $this->pagos = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function samplePagos(): ?array {
        return  array(
            Pago::sample() /*39:*/
        ); /* 39:pagos*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Complemento::validateTipoCfdi($this->tipoCfdi)
        || Complemento::validateSerie($this->serie)
        || Complemento::validateFecha($this->fecha)
        || Complemento::validateUsoCFDI($this->usoCFDI)
        || Complemento::validateMoneda($this->moneda)
        || Complemento::validateEnviarCorreo($this->enviarCorreo)
        || Complemento::validateReceptor($this->receptor)
        || Complemento::validateConceptos($this->conceptos)
        || Complemento::validatePagos($this->pagos);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'TipoCfdi'} = $this->toTipoCfdi();
        $out->{'Serie'} = $this->toSerie();
        $out->{'Fecha'} = $this->toFecha();
        $out->{'UsoCFDI'} = $this->toUsoCFDI();
        $out->{'Moneda'} = $this->toMoneda();
        $out->{'EnviarCorreo'} = $this->toEnviarCorreo();
        $out->{'Receptor'} = $this->toReceptor();
        $out->{'Conceptos'} = $this->toConceptos();
        $out->{'Pagos'} = $this->toPagos();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Complemento
     * @throws Exception
     */
    public function from(stdClass $obj): Complemento {
        Complemento::validateTipoCfdi($this->tipoCfdi, true);
        Complemento::validateSerie($this->serie, true);
        Complemento::validateFecha($this->fecha, true);
        Complemento::validateUsoCFDI($this->usoCFDI, true);
        Complemento::validateMoneda($this->moneda, true);
        Complemento::validateEnviarCorreo($this->enviarCorreo, true);
        Complemento::validateReceptor($this->receptor, true);
        Complemento::validateConceptos($this->conceptos, true);
        Complemento::validatePagos($this->pagos, true);
        return new Complemento(
         Complemento::fromTipoCfdi($obj->{'TipoCfdi'})
        ,Complemento::fromSerie($obj->{'Serie'})
        ,Complemento::fromFecha($obj->{'Fecha'})
        ,Complemento::fromUsoCFDI($obj->{'UsoCFDI'})
        ,Complemento::fromMoneda($obj->{'Moneda'})
        ,Complemento::fromEnviarCorreo($obj->{'EnviarCorreo'})
        ,Complemento::fromReceptor($obj->{'Receptor'})
        ,Complemento::fromConceptos($obj->{'Conceptos'})
        ,Complemento::fromPagos($obj->{'Pagos'})
        );
    }

    /**
     * @return Complemento
     */
    public static function sample(): Complemento {
        return new Complemento(
         Complemento::sampleTipoCfdi()
        ,Complemento::sampleSerie()
        ,Complemento::sampleFecha()
        ,Complemento::sampleUsoCFDI()
        ,Complemento::sampleMoneda()
        ,Complemento::sampleEnviarCorreo()
        ,Complemento::sampleReceptor()
        ,Complemento::sampleConceptos()
        ,Complemento::samplePagos()
        );
    }
}

// This is a autogenerated file:Concepto

class Concepto {
    private ?string $claveProdServ; // json:ClaveProdServ Optional
    private ?string $cantidad; // json:Cantidad Optional
    private ?string $claveUnidad; // json:ClaveUnidad Optional
    private ?string $descripcion; // json:Descripcion Optional
    private ?string $valorUnitario; // json:ValorUnitario Optional
    private ?string $importe; // json:Importe Optional

    /**
     * @param string|null $claveProdServ
     * @param string|null $cantidad
     * @param string|null $claveUnidad
     * @param string|null $descripcion
     * @param string|null $valorUnitario
     * @param string|null $importe
     */
    public function __construct(?string $claveProdServ, ?string $cantidad, ?string $claveUnidad, ?string $descripcion, ?string $valorUnitario, ?string $importe) {
        $this->claveProdServ = $claveProdServ;
        $this->cantidad = $cantidad;
        $this->claveUnidad = $claveUnidad;
        $this->descripcion = $descripcion;
        $this->valorUnitario = $valorUnitario;
        $this->importe = $importe;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromClaveProdServ(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toClaveProdServ(): ?string {
        if (Concepto::validateClaveProdServ($this->claveProdServ))  {
            if (!is_null($this->claveProdServ)) {
                return $this->claveProdServ; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::claveProdServ');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateClaveProdServ(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::claveProdServ");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getClaveProdServ(): ?string {
        return $this->claveProdServ;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setClaveProdServ(?string $value) {
        if (Concepto::validateClaveProdServ($value))  {
            $this->claveProdServ = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleClaveProdServ(): ?string {
        return 'Concepto::claveProdServ::31'; /*31:claveProdServ*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromCantidad(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toCantidad(): ?string {
        if (Concepto::validateCantidad($this->cantidad))  {
            if (!is_null($this->cantidad)) {
                return $this->cantidad; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::cantidad');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateCantidad(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::cantidad");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getCantidad(): ?string {
        return $this->cantidad;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setCantidad(?string $value) {
        if (Concepto::validateCantidad($value))  {
            $this->cantidad = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleCantidad(): ?string {
        return 'Concepto::cantidad::32'; /*32:cantidad*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromClaveUnidad(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toClaveUnidad(): ?string {
        if (Concepto::validateClaveUnidad($this->claveUnidad))  {
            if (!is_null($this->claveUnidad)) {
                return $this->claveUnidad; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::claveUnidad');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateClaveUnidad(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::claveUnidad");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getClaveUnidad(): ?string {
        return $this->claveUnidad;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setClaveUnidad(?string $value) {
        if (Concepto::validateClaveUnidad($value))  {
            $this->claveUnidad = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleClaveUnidad(): ?string {
        return 'Concepto::claveUnidad::33'; /*33:claveUnidad*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDescripcion(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDescripcion(): ?string {
        if (Concepto::validateDescripcion($this->descripcion))  {
            if (!is_null($this->descripcion)) {
                return $this->descripcion; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::descripcion');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDescripcion(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::descripcion");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getDescripcion(): ?string {
        return $this->descripcion;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setDescripcion(?string $value) {
        if (Concepto::validateDescripcion($value))  {
            $this->descripcion = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleDescripcion(): ?string {
        return 'Concepto::descripcion::34'; /*34:descripcion*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromValorUnitario(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toValorUnitario(): ?string {
        if (Concepto::validateValorUnitario($this->valorUnitario))  {
            if (!is_null($this->valorUnitario)) {
                return $this->valorUnitario; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::valorUnitario');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateValorUnitario(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::valorUnitario");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getValorUnitario(): ?string {
        return $this->valorUnitario;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setValorUnitario(?string $value) {
        if (Concepto::validateValorUnitario($value))  {
            $this->valorUnitario = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleValorUnitario(): ?string {
        return 'Concepto::valorUnitario::35'; /*35:valorUnitario*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImporte(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImporte(): ?string {
        if (Concepto::validateImporte($this->importe))  {
            if (!is_null($this->importe)) {
                return $this->importe; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Concepto::importe');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImporte(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Concepto::importe");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImporte(): ?string {
        return $this->importe;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImporte(?string $value) {
        if (Concepto::validateImporte($value))  {
            $this->importe = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImporte(): ?string {
        return 'Concepto::importe::36'; /*36:importe*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Concepto::validateClaveProdServ($this->claveProdServ)
        || Concepto::validateCantidad($this->cantidad)
        || Concepto::validateClaveUnidad($this->claveUnidad)
        || Concepto::validateDescripcion($this->descripcion)
        || Concepto::validateValorUnitario($this->valorUnitario)
        || Concepto::validateImporte($this->importe);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'ClaveProdServ'} = $this->toClaveProdServ();
        $out->{'Cantidad'} = $this->toCantidad();
        $out->{'ClaveUnidad'} = $this->toClaveUnidad();
        $out->{'Descripcion'} = $this->toDescripcion();
        $out->{'ValorUnitario'} = $this->toValorUnitario();
        $out->{'Importe'} = $this->toImporte();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Concepto
     * @throws Exception
     */
    public function from(stdClass $obj): Concepto {
        Concepto::validateClaveProdServ($this->claveProdServ, true);
        Concepto::validateCantidad($this->cantidad, true);
        Concepto::validateClaveUnidad($this->claveUnidad, true);
        Concepto::validateDescripcion($this->descripcion, true);
        Concepto::validateValorUnitario($this->valorUnitario, true);
        Concepto::validateImporte($this->importe, true);
        return new Concepto(
         Concepto::fromClaveProdServ($obj->{'ClaveProdServ'})
        ,Concepto::fromCantidad($obj->{'Cantidad'})
        ,Concepto::fromClaveUnidad($obj->{'ClaveUnidad'})
        ,Concepto::fromDescripcion($obj->{'Descripcion'})
        ,Concepto::fromValorUnitario($obj->{'ValorUnitario'})
        ,Concepto::fromImporte($obj->{'Importe'})
        );
    }

    /**
     * @return Concepto
     */
    public static function sample(): Concepto {
        return new Concepto(
         Concepto::sampleClaveProdServ()
        ,Concepto::sampleCantidad()
        ,Concepto::sampleClaveUnidad()
        ,Concepto::sampleDescripcion()
        ,Concepto::sampleValorUnitario()
        ,Concepto::sampleImporte()
        );
    }
}

// This is a autogenerated file:Pago

class Pago {
    private ?string $fechaPago; // json:FechaPago Optional
    private ?string $formaDePagoP; // json:FormaDePagoP Optional
    private ?string $monedaP; // json:MonedaP Optional
    private ?string $tipoCambioP; // json:TipoCambioP Optional
    private ?string $monto; // json:Monto Optional
    private ?string $numOperacion; // json:NumOperacion Optional
    private ?string $rfcEmisorCtaOrd; // json:RfcEmisorCtaOrd Optional
    private ?string $ctaOrdenante; // json:CtaOrdenante Optional
    private ?string $nomBancoOrdEXT; // json:NomBancoOrdExt Optional
    private ?string $ctaBeneficiario; // json:CtaBeneficiario Optional
    private ?array $doctoRelacionado; // json:DoctoRelacionado Optional

    /**
     * @param string|null $fechaPago
     * @param string|null $formaDePagoP
     * @param string|null $monedaP
     * @param string|null $tipoCambioP
     * @param string|null $monto
     * @param string|null $numOperacion
     * @param string|null $rfcEmisorCtaOrd
     * @param string|null $ctaOrdenante
     * @param string|null $nomBancoOrdEXT
     * @param string|null $ctaBeneficiario
     * @param array|null $doctoRelacionado
     */
    public function __construct(?string $fechaPago, ?string $formaDePagoP, ?string $monedaP, ?string $tipoCambioP, ?string $monto, ?string $numOperacion, ?string $rfcEmisorCtaOrd, ?string $ctaOrdenante, ?string $nomBancoOrdEXT, ?string $ctaBeneficiario, ?array $doctoRelacionado) {
        $this->fechaPago = $fechaPago;
        $this->formaDePagoP = $formaDePagoP;
        $this->monedaP = $monedaP;
        $this->tipoCambioP = $tipoCambioP;
        $this->monto = $monto;
        $this->numOperacion = $numOperacion;
        $this->rfcEmisorCtaOrd = $rfcEmisorCtaOrd;
        $this->ctaOrdenante = $ctaOrdenante;
        $this->nomBancoOrdEXT = $nomBancoOrdEXT;
        $this->ctaBeneficiario = $ctaBeneficiario;
        $this->doctoRelacionado = $doctoRelacionado;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromFechaPago(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toFechaPago(): ?string {
        if (Pago::validateFechaPago($this->fechaPago))  {
            if (!is_null($this->fechaPago)) {
                return $this->fechaPago; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::fechaPago');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateFechaPago(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::fechaPago");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getFechaPago(): ?string {
        return $this->fechaPago;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setFechaPago(?string $value) {
        if (Pago::validateFechaPago($value))  {
            $this->fechaPago = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleFechaPago(): ?string {
        return 'Pago::fechaPago::31'; /*31:fechaPago*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromFormaDePagoP(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toFormaDePagoP(): ?string {
        if (Pago::validateFormaDePagoP($this->formaDePagoP))  {
            if (!is_null($this->formaDePagoP)) {
                return $this->formaDePagoP; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::formaDePagoP');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateFormaDePagoP(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::formaDePagoP");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getFormaDePagoP(): ?string {
        return $this->formaDePagoP;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setFormaDePagoP(?string $value) {
        if (Pago::validateFormaDePagoP($value))  {
            $this->formaDePagoP = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleFormaDePagoP(): ?string {
        return 'Pago::formaDePagoP::32'; /*32:formaDePagoP*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromMonedaP(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toMonedaP(): ?string {
        if (Pago::validateMonedaP($this->monedaP))  {
            if (!is_null($this->monedaP)) {
                return $this->monedaP; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::monedaP');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateMonedaP(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::monedaP");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getMonedaP(): ?string {
        return $this->monedaP;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setMonedaP(?string $value) {
        if (Pago::validateMonedaP($value))  {
            $this->monedaP = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleMonedaP(): ?string {
        return 'Pago::monedaP::33'; /*33:monedaP*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipoCambioP(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipoCambioP(): ?string {
        if (Pago::validateTipoCambioP($this->tipoCambioP))  {
            if (!is_null($this->tipoCambioP)) {
                return $this->tipoCambioP; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::tipoCambioP');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipoCambioP(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::tipoCambioP");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipoCambioP(): ?string {
        return $this->tipoCambioP;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipoCambioP(?string $value) {
        if (Pago::validateTipoCambioP($value))  {
            $this->tipoCambioP = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipoCambioP(): ?string {
        return 'Pago::tipoCambioP::34'; /*34:tipoCambioP*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromMonto(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toMonto(): ?string {
        if (Pago::validateMonto($this->monto))  {
            if (!is_null($this->monto)) {
                return $this->monto; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::monto');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateMonto(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::monto");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getMonto(): ?string {
        return $this->monto;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setMonto(?string $value) {
        if (Pago::validateMonto($value))  {
            $this->monto = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleMonto(): ?string {
        return 'Pago::monto::35'; /*35:monto*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromNumOperacion(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toNumOperacion(): ?string {
        if (Pago::validateNumOperacion($this->numOperacion))  {
            if (!is_null($this->numOperacion)) {
                return $this->numOperacion; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::numOperacion');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateNumOperacion(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::numOperacion");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getNumOperacion(): ?string {
        return $this->numOperacion;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setNumOperacion(?string $value) {
        if (Pago::validateNumOperacion($value))  {
            $this->numOperacion = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleNumOperacion(): ?string {
        return 'Pago::numOperacion::36'; /*36:numOperacion*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromRFCEmisorCtaOrd(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toRFCEmisorCtaOrd(): ?string {
        if (Pago::validateRFCEmisorCtaOrd($this->rfcEmisorCtaOrd))  {
            if (!is_null($this->rfcEmisorCtaOrd)) {
                return $this->rfcEmisorCtaOrd; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::rfcEmisorCtaOrd');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateRFCEmisorCtaOrd(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::rfcEmisorCtaOrd");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getRFCEmisorCtaOrd(): ?string {
        return $this->rfcEmisorCtaOrd;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setRFCEmisorCtaOrd(?string $value) {
        if (Pago::validateRFCEmisorCtaOrd($value))  {
            $this->rfcEmisorCtaOrd = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleRFCEmisorCtaOrd(): ?string {
        return 'Pago::rfcEmisorCtaOrd::37'; /*37:rfcEmisorCtaOrd*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromCtaOrdenante(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toCtaOrdenante(): ?string {
        if (Pago::validateCtaOrdenante($this->ctaOrdenante))  {
            if (!is_null($this->ctaOrdenante)) {
                return $this->ctaOrdenante; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::ctaOrdenante');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateCtaOrdenante(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::ctaOrdenante");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getCtaOrdenante(): ?string {
        return $this->ctaOrdenante;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setCtaOrdenante(?string $value) {
        if (Pago::validateCtaOrdenante($value))  {
            $this->ctaOrdenante = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleCtaOrdenante(): ?string {
        return 'Pago::ctaOrdenante::38'; /*38:ctaOrdenante*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromNomBancoOrdEXT(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toNomBancoOrdEXT(): ?string {
        if (Pago::validateNomBancoOrdEXT($this->nomBancoOrdEXT))  {
            if (!is_null($this->nomBancoOrdEXT)) {
                return $this->nomBancoOrdEXT; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::nomBancoOrdEXT');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateNomBancoOrdEXT(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::nomBancoOrdEXT");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getNomBancoOrdEXT(): ?string {
        return $this->nomBancoOrdEXT;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setNomBancoOrdEXT(?string $value) {
        if (Pago::validateNomBancoOrdEXT($value))  {
            $this->nomBancoOrdEXT = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleNomBancoOrdEXT(): ?string {
        return 'Pago::nomBancoOrdEXT::39'; /*39:nomBancoOrdEXT*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromCtaBeneficiario(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toCtaBeneficiario(): ?string {
        if (Pago::validateCtaBeneficiario($this->ctaBeneficiario))  {
            if (!is_null($this->ctaBeneficiario)) {
                return $this->ctaBeneficiario; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::ctaBeneficiario');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateCtaBeneficiario(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Pago::ctaBeneficiario");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getCtaBeneficiario(): ?string {
        return $this->ctaBeneficiario;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setCtaBeneficiario(?string $value) {
        if (Pago::validateCtaBeneficiario($value))  {
            $this->ctaBeneficiario = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleCtaBeneficiario(): ?string {
        return 'Pago::ctaBeneficiario::40'; /*40:ctaBeneficiario*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromDoctoRelacionado(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return DoctoRelacionado::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toDoctoRelacionado(): ?array {
        if (Pago::validateDoctoRelacionado($this->doctoRelacionado))  {
            if (!is_null($this->doctoRelacionado)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->doctoRelacionado);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Pago::doctoRelacionado');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateDoctoRelacionado(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Pago::doctoRelacionado");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getDoctoRelacionado(): ?array {
        return $this->doctoRelacionado;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setDoctoRelacionado(?array $value) {
        if (Pago::validateDoctoRelacionado($value))  {
            $this->doctoRelacionado = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleDoctoRelacionado(): ?array {
        return  array(
            DoctoRelacionado::sample() /*41:*/
        ); /* 41:doctoRelacionado*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Pago::validateFechaPago($this->fechaPago)
        || Pago::validateFormaDePagoP($this->formaDePagoP)
        || Pago::validateMonedaP($this->monedaP)
        || Pago::validateTipoCambioP($this->tipoCambioP)
        || Pago::validateMonto($this->monto)
        || Pago::validateNumOperacion($this->numOperacion)
        || Pago::validateRFCEmisorCtaOrd($this->rfcEmisorCtaOrd)
        || Pago::validateCtaOrdenante($this->ctaOrdenante)
        || Pago::validateNomBancoOrdEXT($this->nomBancoOrdEXT)
        || Pago::validateCtaBeneficiario($this->ctaBeneficiario)
        || Pago::validateDoctoRelacionado($this->doctoRelacionado);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'FechaPago'} = $this->toFechaPago();
        $out->{'FormaDePagoP'} = $this->toFormaDePagoP();
        $out->{'MonedaP'} = $this->toMonedaP();
        $out->{'TipoCambioP'} = $this->toTipoCambioP();
        $out->{'Monto'} = $this->toMonto();
        $out->{'NumOperacion'} = $this->toNumOperacion();
        $out->{'RfcEmisorCtaOrd'} = $this->toRFCEmisorCtaOrd();
        $out->{'CtaOrdenante'} = $this->toCtaOrdenante();
        $out->{'NomBancoOrdExt'} = $this->toNomBancoOrdEXT();
        $out->{'CtaBeneficiario'} = $this->toCtaBeneficiario();
        $out->{'DoctoRelacionado'} = $this->toDoctoRelacionado();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Pago
     * @throws Exception
     */
    public function from(stdClass $obj): Pago {
        Pago::validateFechaPago($this->fechaPago, true);
        Pago::validateFormaDePagoP($this->formaDePagoP, true);
        Pago::validateMonedaP($this->monedaP, true);
        Pago::validateTipoCambioP($this->tipoCambioP, true);
        Pago::validateMonto($this->monto, true);
        Pago::validateNumOperacion($this->numOperacion, true);
        Pago::validateRFCEmisorCtaOrd($this->rfcEmisorCtaOrd, true);
        Pago::validateCtaOrdenante($this->ctaOrdenante, true);
        Pago::validateNomBancoOrdEXT($this->nomBancoOrdEXT, true);
        Pago::validateCtaBeneficiario($this->ctaBeneficiario, true);
        Pago::validateDoctoRelacionado($this->doctoRelacionado, true);
        return new Pago(
         Pago::fromFechaPago($obj->{'FechaPago'})
        ,Pago::fromFormaDePagoP($obj->{'FormaDePagoP'})
        ,Pago::fromMonedaP($obj->{'MonedaP'})
        ,Pago::fromTipoCambioP($obj->{'TipoCambioP'})
        ,Pago::fromMonto($obj->{'Monto'})
        ,Pago::fromNumOperacion($obj->{'NumOperacion'})
        ,Pago::fromRFCEmisorCtaOrd($obj->{'RfcEmisorCtaOrd'})
        ,Pago::fromCtaOrdenante($obj->{'CtaOrdenante'})
        ,Pago::fromNomBancoOrdEXT($obj->{'NomBancoOrdExt'})
        ,Pago::fromCtaBeneficiario($obj->{'CtaBeneficiario'})
        ,Pago::fromDoctoRelacionado($obj->{'DoctoRelacionado'})
        );
    }

    /**
     * @return Pago
     */
    public static function sample(): Pago {
        return new Pago(
         Pago::sampleFechaPago()
        ,Pago::sampleFormaDePagoP()
        ,Pago::sampleMonedaP()
        ,Pago::sampleTipoCambioP()
        ,Pago::sampleMonto()
        ,Pago::sampleNumOperacion()
        ,Pago::sampleRFCEmisorCtaOrd()
        ,Pago::sampleCtaOrdenante()
        ,Pago::sampleNomBancoOrdEXT()
        ,Pago::sampleCtaBeneficiario()
        ,Pago::sampleDoctoRelacionado()
        );
    }
}

// This is a autogenerated file:DoctoRelacionado

class DoctoRelacionado {
    private ?string $idDocumento; // json:IdDocumento Optional
    private ?string $monedaDR; // json:MonedaDR Optional
    private ?string $equivalenciaDR; // json:EquivalenciaDR Optional
    private ?string $numParcialidad; // json:NumParcialidad Optional
    private ?string $impSaldoAnt; // json:ImpSaldoAnt Optional
    private ?string $impPagado; // json:ImpPagado Optional
    private ?string $impSaldoInsoluto; // json:ImpSaldoInsoluto Optional
    private ?Impuestos $impuestos; // json:Impuestos Optional

    /**
     * @param string|null $idDocumento
     * @param string|null $monedaDR
     * @param string|null $equivalenciaDR
     * @param string|null $numParcialidad
     * @param string|null $impSaldoAnt
     * @param string|null $impPagado
     * @param string|null $impSaldoInsoluto
     * @param Impuestos|null $impuestos
     */
    public function __construct(?string $idDocumento, ?string $monedaDR, ?string $equivalenciaDR, ?string $numParcialidad, ?string $impSaldoAnt, ?string $impPagado, ?string $impSaldoInsoluto, ?Impuestos $impuestos) {
        $this->idDocumento = $idDocumento;
        $this->monedaDR = $monedaDR;
        $this->equivalenciaDR = $equivalenciaDR;
        $this->numParcialidad = $numParcialidad;
        $this->impSaldoAnt = $impSaldoAnt;
        $this->impPagado = $impPagado;
        $this->impSaldoInsoluto = $impSaldoInsoluto;
        $this->impuestos = $impuestos;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromIDDocumento(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toIDDocumento(): ?string {
        if (DoctoRelacionado::validateIDDocumento($this->idDocumento))  {
            if (!is_null($this->idDocumento)) {
                return $this->idDocumento; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::idDocumento');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateIDDocumento(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::idDocumento");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getIDDocumento(): ?string {
        return $this->idDocumento;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setIDDocumento(?string $value) {
        if (DoctoRelacionado::validateIDDocumento($value))  {
            $this->idDocumento = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleIDDocumento(): ?string {
        return 'DoctoRelacionado::idDocumento::31'; /*31:idDocumento*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromMonedaDR(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toMonedaDR(): ?string {
        if (DoctoRelacionado::validateMonedaDR($this->monedaDR))  {
            if (!is_null($this->monedaDR)) {
                return $this->monedaDR; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::monedaDR');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateMonedaDR(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::monedaDR");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getMonedaDR(): ?string {
        return $this->monedaDR;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setMonedaDR(?string $value) {
        if (DoctoRelacionado::validateMonedaDR($value))  {
            $this->monedaDR = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleMonedaDR(): ?string {
        return 'DoctoRelacionado::monedaDR::32'; /*32:monedaDR*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromEquivalenciaDR(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toEquivalenciaDR(): ?string {
        if (DoctoRelacionado::validateEquivalenciaDR($this->equivalenciaDR))  {
            if (!is_null($this->equivalenciaDR)) {
                return $this->equivalenciaDR; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::equivalenciaDR');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateEquivalenciaDR(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::equivalenciaDR");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getEquivalenciaDR(): ?string {
        return $this->equivalenciaDR;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setEquivalenciaDR(?string $value) {
        if (DoctoRelacionado::validateEquivalenciaDR($value))  {
            $this->equivalenciaDR = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleEquivalenciaDR(): ?string {
        return 'DoctoRelacionado::equivalenciaDR::33'; /*33:equivalenciaDR*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromNumParcialidad(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toNumParcialidad(): ?string {
        if (DoctoRelacionado::validateNumParcialidad($this->numParcialidad))  {
            if (!is_null($this->numParcialidad)) {
                return $this->numParcialidad; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::numParcialidad');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateNumParcialidad(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::numParcialidad");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getNumParcialidad(): ?string {
        return $this->numParcialidad;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setNumParcialidad(?string $value) {
        if (DoctoRelacionado::validateNumParcialidad($value))  {
            $this->numParcialidad = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleNumParcialidad(): ?string {
        return 'DoctoRelacionado::numParcialidad::34'; /*34:numParcialidad*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImpSaldoAnt(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImpSaldoAnt(): ?string {
        if (DoctoRelacionado::validateImpSaldoAnt($this->impSaldoAnt))  {
            if (!is_null($this->impSaldoAnt)) {
                return $this->impSaldoAnt; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::impSaldoAnt');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImpSaldoAnt(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::impSaldoAnt");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImpSaldoAnt(): ?string {
        return $this->impSaldoAnt;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImpSaldoAnt(?string $value) {
        if (DoctoRelacionado::validateImpSaldoAnt($value))  {
            $this->impSaldoAnt = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImpSaldoAnt(): ?string {
        return 'DoctoRelacionado::impSaldoAnt::35'; /*35:impSaldoAnt*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImpPagado(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImpPagado(): ?string {
        if (DoctoRelacionado::validateImpPagado($this->impPagado))  {
            if (!is_null($this->impPagado)) {
                return $this->impPagado; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::impPagado');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImpPagado(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::impPagado");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImpPagado(): ?string {
        return $this->impPagado;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImpPagado(?string $value) {
        if (DoctoRelacionado::validateImpPagado($value))  {
            $this->impPagado = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImpPagado(): ?string {
        return 'DoctoRelacionado::impPagado::36'; /*36:impPagado*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImpSaldoInsoluto(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImpSaldoInsoluto(): ?string {
        if (DoctoRelacionado::validateImpSaldoInsoluto($this->impSaldoInsoluto))  {
            if (!is_null($this->impSaldoInsoluto)) {
                return $this->impSaldoInsoluto; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::impSaldoInsoluto');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImpSaldoInsoluto(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:DoctoRelacionado::impSaldoInsoluto");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImpSaldoInsoluto(): ?string {
        return $this->impSaldoInsoluto;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImpSaldoInsoluto(?string $value) {
        if (DoctoRelacionado::validateImpSaldoInsoluto($value))  {
            $this->impSaldoInsoluto = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImpSaldoInsoluto(): ?string {
        return 'DoctoRelacionado::impSaldoInsoluto::37'; /*37:impSaldoInsoluto*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?Impuestos
     */
    public static function fromImpuestos(?stdClass $value): ?Impuestos {
        if (!is_null($value)) {
            return Impuestos::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toImpuestos(): ?stdClass {
        if (DoctoRelacionado::validateImpuestos($this->impuestos))  {
            if (!is_null($this->impuestos)) {
                return $this->impuestos->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this DoctoRelacionado::impuestos');
    }

    /**
     * @param Impuestos|null
     * @return bool
     * @throws Exception
     */
    public static function validateImpuestos(?Impuestos $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @return ?Impuestos
     */
    public function getImpuestos(): ?Impuestos {
        return $this->impuestos;
    }

    /**
     * @param Impuestos|null
     * @throws Exception
     */
    public function setImpuestos(?Impuestos $value) {
        if (DoctoRelacionado::validateImpuestos($value))  {
            $this->impuestos = $value;
        }
    }

    /**
     * @return ?Impuestos
     */
    public static function sampleImpuestos(): ?Impuestos {
        return Impuestos::sample(); /*38:impuestos*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return DoctoRelacionado::validateIDDocumento($this->idDocumento)
        || DoctoRelacionado::validateMonedaDR($this->monedaDR)
        || DoctoRelacionado::validateEquivalenciaDR($this->equivalenciaDR)
        || DoctoRelacionado::validateNumParcialidad($this->numParcialidad)
        || DoctoRelacionado::validateImpSaldoAnt($this->impSaldoAnt)
        || DoctoRelacionado::validateImpPagado($this->impPagado)
        || DoctoRelacionado::validateImpSaldoInsoluto($this->impSaldoInsoluto)
        || DoctoRelacionado::validateImpuestos($this->impuestos);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'IdDocumento'} = $this->toIDDocumento();
        $out->{'MonedaDR'} = $this->toMonedaDR();
        $out->{'EquivalenciaDR'} = $this->toEquivalenciaDR();
        $out->{'NumParcialidad'} = $this->toNumParcialidad();
        $out->{'ImpSaldoAnt'} = $this->toImpSaldoAnt();
        $out->{'ImpPagado'} = $this->toImpPagado();
        $out->{'ImpSaldoInsoluto'} = $this->toImpSaldoInsoluto();
        $out->{'Impuestos'} = $this->toImpuestos();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return DoctoRelacionado
     * @throws Exception
     */
    public function from(stdClass $obj): DoctoRelacionado {
        DoctoRelacionado::validateIDDocumento($this->idDocumento, true);
        DoctoRelacionado::validateMonedaDR($this->monedaDR, true);
        DoctoRelacionado::validateEquivalenciaDR($this->equivalenciaDR, true);
        DoctoRelacionado::validateNumParcialidad($this->numParcialidad, true);
        DoctoRelacionado::validateImpSaldoAnt($this->impSaldoAnt, true);
        DoctoRelacionado::validateImpPagado($this->impPagado, true);
        DoctoRelacionado::validateImpSaldoInsoluto($this->impSaldoInsoluto, true);
        DoctoRelacionado::validateImpuestos($this->impuestos, true);
        return new DoctoRelacionado(
         DoctoRelacionado::fromIDDocumento($obj->{'IdDocumento'})
        ,DoctoRelacionado::fromMonedaDR($obj->{'MonedaDR'})
        ,DoctoRelacionado::fromEquivalenciaDR($obj->{'EquivalenciaDR'})
        ,DoctoRelacionado::fromNumParcialidad($obj->{'NumParcialidad'})
        ,DoctoRelacionado::fromImpSaldoAnt($obj->{'ImpSaldoAnt'})
        ,DoctoRelacionado::fromImpPagado($obj->{'ImpPagado'})
        ,DoctoRelacionado::fromImpSaldoInsoluto($obj->{'ImpSaldoInsoluto'})
        ,DoctoRelacionado::fromImpuestos($obj->{'Impuestos'})
        );
    }

    /**
     * @return DoctoRelacionado
     */
    public static function sample(): DoctoRelacionado {
        return new DoctoRelacionado(
         DoctoRelacionado::sampleIDDocumento()
        ,DoctoRelacionado::sampleMonedaDR()
        ,DoctoRelacionado::sampleEquivalenciaDR()
        ,DoctoRelacionado::sampleNumParcialidad()
        ,DoctoRelacionado::sampleImpSaldoAnt()
        ,DoctoRelacionado::sampleImpPagado()
        ,DoctoRelacionado::sampleImpSaldoInsoluto()
        ,DoctoRelacionado::sampleImpuestos()
        );
    }
}

// This is a autogenerated file:Impuestos

class Impuestos {
    private ?array $traslados; // json:Traslados Optional
    private ?array $retenidos; // json:Retenidos Optional

    /**
     * @param array|null $traslados
     * @param array|null $retenidos
     */
    public function __construct(?array $traslados, ?array $retenidos) {
        $this->traslados = $traslados;
        $this->retenidos = $retenidos;
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromTraslados(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Retenido::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toTraslados(): ?array {
        if (Impuestos::validateTraslados($this->traslados))  {
            if (!is_null($this->traslados)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->traslados);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Impuestos::traslados');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateTraslados(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Impuestos::traslados");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getTraslados(): ?array {
        return $this->traslados;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setTraslados(?array $value) {
        if (Impuestos::validateTraslados($value))  {
            $this->traslados = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleTraslados(): ?array {
        return  array(
            Retenido::sample() /*31:*/
        ); /* 31:traslados*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromRetenidos(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return Retenido::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toRetenidos(): ?array {
        if (Impuestos::validateRetenidos($this->retenidos))  {
            if (!is_null($this->retenidos)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->retenidos);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Impuestos::retenidos');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateRetenidos(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Impuestos::retenidos");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * @return ?array
     */
    public function getRetenidos(): ?array {
        return $this->retenidos;
    }

    /**
     * @param array|null
     * @throws Exception
     */
    public function setRetenidos(?array $value) {
        if (Impuestos::validateRetenidos($value))  {
            $this->retenidos = $value;
        }
    }

    /**
     * @return ?array
     */
    public static function sampleRetenidos(): ?array {
        return  array(
            Retenido::sample() /*32:*/
        ); /* 32:retenidos*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Impuestos::validateTraslados($this->traslados)
        || Impuestos::validateRetenidos($this->retenidos);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Traslados'} = $this->toTraslados();
        $out->{'Retenidos'} = $this->toRetenidos();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Impuestos
     * @throws Exception
     */
    public function from(stdClass $obj): Impuestos {
        Impuestos::validateTraslados($this->traslados, true);
        Impuestos::validateRetenidos($this->retenidos, true);
        return new Impuestos(
         Impuestos::fromTraslados($obj->{'Traslados'})
        ,Impuestos::fromRetenidos($obj->{'Retenidos'})
        );
    }

    /**
     * @return Impuestos
     */
    public static function sample(): Impuestos {
        return new Impuestos(
         Impuestos::sampleTraslados()
        ,Impuestos::sampleRetenidos()
        );
    }
}

// This is a autogenerated file:Retenido

class Retenido {
    private ?string $base; // json:Base Optional
    private ?string $impuesto; // json:Impuesto Optional
    private ?string $tipoFactor; // json:TipoFactor Optional
    private ?string $tasaOCuota; // json:TasaOCuota Optional
    private ?string $importe; // json:Importe Optional

    /**
     * @param string|null $base
     * @param string|null $impuesto
     * @param string|null $tipoFactor
     * @param string|null $tasaOCuota
     * @param string|null $importe
     */
    public function __construct(?string $base, ?string $impuesto, ?string $tipoFactor, ?string $tasaOCuota, ?string $importe) {
        $this->base = $base;
        $this->impuesto = $impuesto;
        $this->tipoFactor = $tipoFactor;
        $this->tasaOCuota = $tasaOCuota;
        $this->importe = $importe;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromBase(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toBase(): ?string {
        if (Retenido::validateBase($this->base))  {
            if (!is_null($this->base)) {
                return $this->base; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Retenido::base');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateBase(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Retenido::base");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getBase(): ?string {
        return $this->base;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setBase(?string $value) {
        if (Retenido::validateBase($value))  {
            $this->base = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleBase(): ?string {
        return 'Retenido::base::31'; /*31:base*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImpuesto(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImpuesto(): ?string {
        if (Retenido::validateImpuesto($this->impuesto))  {
            if (!is_null($this->impuesto)) {
                return $this->impuesto; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Retenido::impuesto');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImpuesto(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Retenido::impuesto");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImpuesto(): ?string {
        return $this->impuesto;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImpuesto(?string $value) {
        if (Retenido::validateImpuesto($value))  {
            $this->impuesto = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImpuesto(): ?string {
        return 'Retenido::impuesto::32'; /*32:impuesto*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTipoFactor(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTipoFactor(): ?string {
        if (Retenido::validateTipoFactor($this->tipoFactor))  {
            if (!is_null($this->tipoFactor)) {
                return $this->tipoFactor; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Retenido::tipoFactor');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTipoFactor(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Retenido::tipoFactor");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTipoFactor(): ?string {
        return $this->tipoFactor;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTipoFactor(?string $value) {
        if (Retenido::validateTipoFactor($value))  {
            $this->tipoFactor = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTipoFactor(): ?string {
        return 'Retenido::tipoFactor::33'; /*33:tipoFactor*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTasaOCuota(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTasaOCuota(): ?string {
        if (Retenido::validateTasaOCuota($this->tasaOCuota))  {
            if (!is_null($this->tasaOCuota)) {
                return $this->tasaOCuota; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Retenido::tasaOCuota');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTasaOCuota(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Retenido::tasaOCuota");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getTasaOCuota(): ?string {
        return $this->tasaOCuota;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setTasaOCuota(?string $value) {
        if (Retenido::validateTasaOCuota($value))  {
            $this->tasaOCuota = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleTasaOCuota(): ?string {
        return 'Retenido::tasaOCuota::34'; /*34:tasaOCuota*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromImporte(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toImporte(): ?string {
        if (Retenido::validateImporte($this->importe))  {
            if (!is_null($this->importe)) {
                return $this->importe; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Retenido::importe');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateImporte(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Retenido::importe");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getImporte(): ?string {
        return $this->importe;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setImporte(?string $value) {
        if (Retenido::validateImporte($value))  {
            $this->importe = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleImporte(): ?string {
        return 'Retenido::importe::35'; /*35:importe*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Retenido::validateBase($this->base)
        || Retenido::validateImpuesto($this->impuesto)
        || Retenido::validateTipoFactor($this->tipoFactor)
        || Retenido::validateTasaOCuota($this->tasaOCuota)
        || Retenido::validateImporte($this->importe);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Base'} = $this->toBase();
        $out->{'Impuesto'} = $this->toImpuesto();
        $out->{'TipoFactor'} = $this->toTipoFactor();
        $out->{'TasaOCuota'} = $this->toTasaOCuota();
        $out->{'Importe'} = $this->toImporte();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Retenido
     * @throws Exception
     */
    public function from(stdClass $obj): Retenido {
        Retenido::validateBase($this->base, true);
        Retenido::validateImpuesto($this->impuesto, true);
        Retenido::validateTipoFactor($this->tipoFactor, true);
        Retenido::validateTasaOCuota($this->tasaOCuota, true);
        Retenido::validateImporte($this->importe, true);
        return new Retenido(
         Retenido::fromBase($obj->{'Base'})
        ,Retenido::fromImpuesto($obj->{'Impuesto'})
        ,Retenido::fromTipoFactor($obj->{'TipoFactor'})
        ,Retenido::fromTasaOCuota($obj->{'TasaOCuota'})
        ,Retenido::fromImporte($obj->{'Importe'})
        );
    }

    /**
     * @return Retenido
     */
    public static function sample(): Retenido {
        return new Retenido(
         Retenido::sampleBase()
        ,Retenido::sampleImpuesto()
        ,Retenido::sampleTipoFactor()
        ,Retenido::sampleTasaOCuota()
        ,Retenido::sampleImporte()
        );
    }
}

// This is a autogenerated file:Receptor

class Receptor {
    private ?string $uid; // json:UID Optional

    /**
     * @param string|null $uid
     */
    public function __construct(?string $uid) {
        $this->uid = $uid;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromUid(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toUid(): ?string {
        if (Receptor::validateUid($this->uid))  {
            if (!is_null($this->uid)) {
                return $this->uid; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Receptor::uid');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateUid(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Receptor::uid");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getUid(): ?string {
        return $this->uid;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setUid(?string $value) {
        if (Receptor::validateUid($value))  {
            $this->uid = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleUid(): ?string {
        return 'Receptor::uid::31'; /*31:uid*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Receptor::validateUid($this->uid);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'UID'} = $this->toUid();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Receptor
     * @throws Exception
     */
    public function from(stdClass $obj): Receptor {
        Receptor::validateUid($this->uid, true);
        return new Receptor(
         Receptor::fromUid($obj->{'UID'})
        );
    }

    /**
     * @return Receptor
     */
    public static function sample(): Receptor {
        return new Receptor(
         Receptor::sampleUid()
        );
    }
}
?>
