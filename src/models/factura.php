<?php

// This is a autogenerated file:Factura

class Factura {
    private Receptor $receptor; // json:Receptor Required
    private string $tipoDocumento; // json:TipoDocumento Required
    private array $conceptos; // json:Conceptos Required
    private string $usoCFDI; // json:UsoCFDI Required
    private int $serie; // json:Serie Required
    private string $formaPago; // json:FormaPago Required
    private string $metodoPago; // json:MetodoPago Required
    private string $moneda; // json:Moneda Required
    private bool $enviarCorreo; // json:EnviarCorreo Required

    /**
     * @param Receptor $receptor
     * @param string $tipoDocumento
     * @param array $conceptos
     * @param string $usoCFDI
     * @param int $serie
     * @param string $formaPago
     * @param string $metodoPago
     * @param string $moneda
     * @param bool $enviarCorreo
     */
    public function __construct(Receptor $receptor, string $tipoDocumento, array $conceptos, string $usoCFDI, int $serie, string $formaPago, string $metodoPago, string $moneda, bool $enviarCorreo) {
        $this->receptor = $receptor;
        $this->tipoDocumento = $tipoDocumento;
        $this->conceptos = $conceptos;
        $this->usoCFDI = $usoCFDI;
        $this->serie = $serie;
        $this->formaPago = $formaPago;
        $this->metodoPago = $metodoPago;
        $this->moneda = $moneda;
        $this->enviarCorreo = $enviarCorreo;
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Receptor
     */
    public static function fromReceptor(stdClass $value): Receptor {
        return Receptor::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toReceptor(): stdClass {
        if (Factura::validateReceptor($this->receptor))  {
            return $this->receptor->to(); /*class*/
        }
        throw new Exception('never get to this Factura::receptor');
    }

    /**
     * @param Receptor
     * @return bool
     * @throws Exception
     */
    public static function validateReceptor(Receptor $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @return Receptor
     */
    public function getReceptor(): Receptor {
        return $this->receptor;
    }

    /**
     * @param Receptor
     * @throws Exception
     */
    public function setReceptor(Receptor $value) {
        if (Factura::validateReceptor($value))  {
            $this->receptor = $value;
        }
    }

    /**
     * @return Receptor
     */
    public static function sampleReceptor(): Receptor {
        return Receptor::sample(); /*31:receptor*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTipoDocumento(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTipoDocumento(): string {
        if (Factura::validateTipoDocumento($this->tipoDocumento))  {
            return $this->tipoDocumento; /*string*/
        }
        throw new Exception('never get to this Factura::tipoDocumento');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTipoDocumento(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Factura::tipoDocumento");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getTipoDocumento(): string {
        return $this->tipoDocumento;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setTipoDocumento(string $value) {
        if (Factura::validateTipoDocumento($value))  {
            $this->tipoDocumento = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleTipoDocumento(): string {
        return 'Factura::tipoDocumento::32'; /*32:tipoDocumento*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromConceptos(array $value): array {
        return  array_map(function ($value) {
            return Concepto::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toConceptos(): array {
        if (Factura::validateConceptos($this->conceptos))  {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->conceptos);
        }
        throw new Exception('never get to this Factura::conceptos');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateConceptos(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Factura::conceptos");
        }
        array_walk($value, function($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @return array
     */
    public function getConceptos(): array {
        return $this->conceptos;
    }

    /**
     * @param array
     * @throws Exception
     */
    public function setConceptos(array $value) {
        if (Factura::validateConceptos($value))  {
            $this->conceptos = $value;
        }
    }

    /**
     * @return array
     */
    public static function sampleConceptos(): array {
        return  array(
            Concepto::sample() /*33:*/
        ); /* 33:conceptos*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromUsoCFDI(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toUsoCFDI(): string {
        if (Factura::validateUsoCFDI($this->usoCFDI))  {
            return $this->usoCFDI; /*string*/
        }
        throw new Exception('never get to this Factura::usoCFDI');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateUsoCFDI(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Factura::usoCFDI");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getUsoCFDI(): string {
        return $this->usoCFDI;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setUsoCFDI(string $value) {
        if (Factura::validateUsoCFDI($value))  {
            $this->usoCFDI = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleUsoCFDI(): string {
        return 'Factura::usoCFDI::34'; /*34:usoCFDI*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromSerie(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toSerie(): int {
        if (Factura::validateSerie($this->serie))  {
            return $this->serie; /*int*/
        }
        throw new Exception('never get to this Factura::serie');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateSerie(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Factura::serie");
        }
        return true;
    }

    /**
     * @return int
     */
    public function getSerie(): int {
        return $this->serie;
    }

    /**
     * @param int
     * @throws Exception
     */
    public function setSerie(int $value) {
        if (Factura::validateSerie($value))  {
            $this->serie = $value;
        }
    }

    /**
     * @return int
     */
    public static function sampleSerie(): int {
        return 35; /*35:serie*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFormaPago(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFormaPago(): string {
        if (Factura::validateFormaPago($this->formaPago))  {
            return $this->formaPago; /*string*/
        }
        throw new Exception('never get to this Factura::formaPago');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFormaPago(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Factura::formaPago");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getFormaPago(): string {
        return $this->formaPago;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setFormaPago(string $value) {
        if (Factura::validateFormaPago($value))  {
            $this->formaPago = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleFormaPago(): string {
        return 'Factura::formaPago::36'; /*36:formaPago*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromMetodoPago(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toMetodoPago(): string {
        if (Factura::validateMetodoPago($this->metodoPago))  {
            return $this->metodoPago; /*string*/
        }
        throw new Exception('never get to this Factura::metodoPago');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateMetodoPago(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Factura::metodoPago");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getMetodoPago(): string {
        return $this->metodoPago;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setMetodoPago(string $value) {
        if (Factura::validateMetodoPago($value))  {
            $this->metodoPago = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleMetodoPago(): string {
        return 'Factura::metodoPago::37'; /*37:metodoPago*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromMoneda(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toMoneda(): string {
        if (Factura::validateMoneda($this->moneda))  {
            return $this->moneda; /*string*/
        }
        throw new Exception('never get to this Factura::moneda');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateMoneda(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Factura::moneda");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getMoneda(): string {
        return $this->moneda;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setMoneda(string $value) {
        if (Factura::validateMoneda($value))  {
            $this->moneda = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleMoneda(): string {
        return 'Factura::moneda::38'; /*38:moneda*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnviarCorreo(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnviarCorreo(): bool {
        if (Factura::validateEnviarCorreo($this->enviarCorreo))  {
            return $this->enviarCorreo; /*bool*/
        }
        throw new Exception('never get to this Factura::enviarCorreo');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnviarCorreo(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Factura::enviarCorreo");
        }
        return true;
    }

    /**
     * @return bool
     */
    public function getEnviarCorreo(): bool {
        return $this->enviarCorreo;
    }

    /**
     * @param bool
     * @throws Exception
     */
    public function setEnviarCorreo(bool $value) {
        if (Factura::validateEnviarCorreo($value))  {
            $this->enviarCorreo = $value;
        }
    }

    /**
     * @return bool
     */
    public static function sampleEnviarCorreo(): bool {
        return true; /*39:enviarCorreo*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Factura::validateReceptor($this->receptor)
        || Factura::validateTipoDocumento($this->tipoDocumento)
        || Factura::validateConceptos($this->conceptos)
        || Factura::validateUsoCFDI($this->usoCFDI)
        || Factura::validateSerie($this->serie)
        || Factura::validateFormaPago($this->formaPago)
        || Factura::validateMetodoPago($this->metodoPago)
        || Factura::validateMoneda($this->moneda)
        || Factura::validateEnviarCorreo($this->enviarCorreo);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Receptor'} = $this->toReceptor();
        $out->{'TipoDocumento'} = $this->toTipoDocumento();
        $out->{'Conceptos'} = $this->toConceptos();
        $out->{'UsoCFDI'} = $this->toUsoCFDI();
        $out->{'Serie'} = $this->toSerie();
        $out->{'FormaPago'} = $this->toFormaPago();
        $out->{'MetodoPago'} = $this->toMetodoPago();
        $out->{'Moneda'} = $this->toMoneda();
        $out->{'EnviarCorreo'} = $this->toEnviarCorreo();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Factura
     * @throws Exception
     */
    public function from(stdClass $obj): Factura {
        Factura::validateReceptor($this->receptor, true);
        Factura::validateTipoDocumento($this->tipoDocumento, true);
        Factura::validateConceptos($this->conceptos, true);
        Factura::validateUsoCFDI($this->usoCFDI, true);
        Factura::validateSerie($this->serie, true);
        Factura::validateFormaPago($this->formaPago, true);
        Factura::validateMetodoPago($this->metodoPago, true);
        Factura::validateMoneda($this->moneda, true);
        Factura::validateEnviarCorreo($this->enviarCorreo, true);
        return new Factura(
         Factura::fromReceptor($obj->{'Receptor'})
        ,Factura::fromTipoDocumento($obj->{'TipoDocumento'})
        ,Factura::fromConceptos($obj->{'Conceptos'})
        ,Factura::fromUsoCFDI($obj->{'UsoCFDI'})
        ,Factura::fromSerie($obj->{'Serie'})
        ,Factura::fromFormaPago($obj->{'FormaPago'})
        ,Factura::fromMetodoPago($obj->{'MetodoPago'})
        ,Factura::fromMoneda($obj->{'Moneda'})
        ,Factura::fromEnviarCorreo($obj->{'EnviarCorreo'})
        );
    }

    /**
     * @return Factura
     */
    public static function sample(): Factura {
        return new Factura(
         Factura::sampleReceptor()
        ,Factura::sampleTipoDocumento()
        ,Factura::sampleConceptos()
        ,Factura::sampleUsoCFDI()
        ,Factura::sampleSerie()
        ,Factura::sampleFormaPago()
        ,Factura::sampleMetodoPago()
        ,Factura::sampleMoneda()
        ,Factura::sampleEnviarCorreo()
        );
    }
}

// This is a autogenerated file:Concepto

class Concepto {
    private string $claveProdServ; // json:ClaveProdServ Required
    private int $cantidad; // json:Cantidad Required
    private string $claveUnidad; // json:ClaveUnidad Required
    private string $unidad; // json:Unidad Required
    private float $valorUnitario; // json:ValorUnitario Required
    private string $descripcion; // json:Descripcion Required
    private Impuestos $impuestos; // json:Impuestos Required

    /**
     * @param string $claveProdServ
     * @param int $cantidad
     * @param string $claveUnidad
     * @param string $unidad
     * @param float $valorUnitario
     * @param string $descripcion
     * @param Impuestos $impuestos
     */
    public function __construct(string $claveProdServ, int $cantidad, string $claveUnidad, string $unidad, float $valorUnitario, string $descripcion, Impuestos $impuestos) {
        $this->claveProdServ = $claveProdServ;
        $this->cantidad = $cantidad;
        $this->claveUnidad = $claveUnidad;
        $this->unidad = $unidad;
        $this->valorUnitario = $valorUnitario;
        $this->descripcion = $descripcion;
        $this->impuestos = $impuestos;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromClaveProdServ(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toClaveProdServ(): string {
        if (Concepto::validateClaveProdServ($this->claveProdServ))  {
            return $this->claveProdServ; /*string*/
        }
        throw new Exception('never get to this Concepto::claveProdServ');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateClaveProdServ(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Concepto::claveProdServ");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getClaveProdServ(): string {
        return $this->claveProdServ;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setClaveProdServ(string $value) {
        if (Concepto::validateClaveProdServ($value))  {
            $this->claveProdServ = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleClaveProdServ(): string {
        return 'Concepto::claveProdServ::31'; /*31:claveProdServ*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromCantidad(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toCantidad(): int {
        if (Concepto::validateCantidad($this->cantidad))  {
            return $this->cantidad; /*int*/
        }
        throw new Exception('never get to this Concepto::cantidad');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateCantidad(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Concepto::cantidad");
        }
        return true;
    }

    /**
     * @return int
     */
    public function getCantidad(): int {
        return $this->cantidad;
    }

    /**
     * @param int
     * @throws Exception
     */
    public function setCantidad(int $value) {
        if (Concepto::validateCantidad($value))  {
            $this->cantidad = $value;
        }
    }

    /**
     * @return int
     */
    public static function sampleCantidad(): int {
        return 32; /*32:cantidad*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromClaveUnidad(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toClaveUnidad(): string {
        if (Concepto::validateClaveUnidad($this->claveUnidad))  {
            return $this->claveUnidad; /*string*/
        }
        throw new Exception('never get to this Concepto::claveUnidad');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateClaveUnidad(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Concepto::claveUnidad");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getClaveUnidad(): string {
        return $this->claveUnidad;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setClaveUnidad(string $value) {
        if (Concepto::validateClaveUnidad($value))  {
            $this->claveUnidad = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleClaveUnidad(): string {
        return 'Concepto::claveUnidad::33'; /*33:claveUnidad*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromUnidad(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toUnidad(): string {
        if (Concepto::validateUnidad($this->unidad))  {
            return $this->unidad; /*string*/
        }
        throw new Exception('never get to this Concepto::unidad');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateUnidad(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Concepto::unidad");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getUnidad(): string {
        return $this->unidad;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setUnidad(string $value) {
        if (Concepto::validateUnidad($value))  {
            $this->unidad = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleUnidad(): string {
        return 'Concepto::unidad::34'; /*34:unidad*/
    }

    /**
     * @param float $value
     * @throws Exception
     * @return float
     */
    public static function fromValorUnitario(float $value): float {
        return $value; /*float*/
    }

    /**
     * @throws Exception
     * @return float
     */
    public function toValorUnitario(): float {
        if (Concepto::validateValorUnitario($this->valorUnitario))  {
            return $this->valorUnitario; /*float*/
        }
        throw new Exception('never get to this Concepto::valorUnitario');
    }

    /**
     * @param float
     * @return bool
     * @throws Exception
     */
    public static function validateValorUnitario(float $value): bool {
        if (!is_float($value)) {
            throw new Exception("Attribute Error:Concepto::valorUnitario");
        }
        return true;
    }

    /**
     * @return float
     */
    public function getValorUnitario(): float {
        return $this->valorUnitario;
    }

    /**
     * @param float
     * @throws Exception
     */
    public function setValorUnitario(float $value) {
        if (Concepto::validateValorUnitario($value))  {
            $this->valorUnitario = $value;
        }
    }

    /**
     * @return float
     */
    public static function sampleValorUnitario(): float {
        return 35.035; /*35:valorUnitario*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDescripcion(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toDescripcion(): string {
        if (Concepto::validateDescripcion($this->descripcion))  {
            return $this->descripcion; /*string*/
        }
        throw new Exception('never get to this Concepto::descripcion');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDescripcion(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Concepto::descripcion");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getDescripcion(): string {
        return $this->descripcion;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setDescripcion(string $value) {
        if (Concepto::validateDescripcion($value))  {
            $this->descripcion = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleDescripcion(): string {
        return 'Concepto::descripcion::36'; /*36:descripcion*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Impuestos
     */
    public static function fromImpuestos(stdClass $value): Impuestos {
        return Impuestos::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toImpuestos(): stdClass {
        if (Concepto::validateImpuestos($this->impuestos))  {
            return $this->impuestos->to(); /*class*/
        }
        throw new Exception('never get to this Concepto::impuestos');
    }

    /**
     * @param Impuestos
     * @return bool
     * @throws Exception
     */
    public static function validateImpuestos(Impuestos $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @return Impuestos
     */
    public function getImpuestos(): Impuestos {
        return $this->impuestos;
    }

    /**
     * @param Impuestos
     * @throws Exception
     */
    public function setImpuestos(Impuestos $value) {
        if (Concepto::validateImpuestos($value))  {
            $this->impuestos = $value;
        }
    }

    /**
     * @return Impuestos
     */
    public static function sampleImpuestos(): Impuestos {
        return Impuestos::sample(); /*37:impuestos*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Concepto::validateClaveProdServ($this->claveProdServ)
        || Concepto::validateCantidad($this->cantidad)
        || Concepto::validateClaveUnidad($this->claveUnidad)
        || Concepto::validateUnidad($this->unidad)
        || Concepto::validateValorUnitario($this->valorUnitario)
        || Concepto::validateDescripcion($this->descripcion)
        || Concepto::validateImpuestos($this->impuestos);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'ClaveProdServ'} = $this->toClaveProdServ();
        $out->{'Cantidad'} = $this->toCantidad();
        $out->{'ClaveUnidad'} = $this->toClaveUnidad();
        $out->{'Unidad'} = $this->toUnidad();
        $out->{'ValorUnitario'} = $this->toValorUnitario();
        $out->{'Descripcion'} = $this->toDescripcion();
        $out->{'Impuestos'} = $this->toImpuestos();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Concepto
     * @throws Exception
     */
    public function from(stdClass $obj): Concepto {
        Concepto::validateClaveProdServ($this->claveProdServ, true);
        Concepto::validateCantidad($this->cantidad, true);
        Concepto::validateClaveUnidad($this->claveUnidad, true);
        Concepto::validateUnidad($this->unidad, true);
        Concepto::validateValorUnitario($this->valorUnitario, true);
        Concepto::validateDescripcion($this->descripcion, true);
        Concepto::validateImpuestos($this->impuestos, true);
        return new Concepto(
         Concepto::fromClaveProdServ($obj->{'ClaveProdServ'})
        ,Concepto::fromCantidad($obj->{'Cantidad'})
        ,Concepto::fromClaveUnidad($obj->{'ClaveUnidad'})
        ,Concepto::fromUnidad($obj->{'Unidad'})
        ,Concepto::fromValorUnitario($obj->{'ValorUnitario'})
        ,Concepto::fromDescripcion($obj->{'Descripcion'})
        ,Concepto::fromImpuestos($obj->{'Impuestos'})
        );
    }

    /**
     * @return Concepto
     */
    public static function sample(): Concepto {
        return new Concepto(
         Concepto::sampleClaveProdServ()
        ,Concepto::sampleCantidad()
        ,Concepto::sampleClaveUnidad()
        ,Concepto::sampleUnidad()
        ,Concepto::sampleValorUnitario()
        ,Concepto::sampleDescripcion()
        ,Concepto::sampleImpuestos()
        );
    }
}

// This is a autogenerated file:Impuestos

class Impuestos {
    private array $traslados; // json:Traslados Required
    private array $locales; // json:Locales Required

    /**
     * @param array $traslados
     * @param array $locales
     */
    public function __construct(array $traslados, array $locales) {
        $this->traslados = $traslados;
        $this->locales = $locales;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromTraslados(array $value): array {
        return  array_map(function ($value) {
            return Locale::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toTraslados(): array {
        if (Impuestos::validateTraslados($this->traslados))  {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->traslados);
        }
        throw new Exception('never get to this Impuestos::traslados');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateTraslados(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Impuestos::traslados");
        }
        array_walk($value, function($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @return array
     */
    public function getTraslados(): array {
        return $this->traslados;
    }

    /**
     * @param array
     * @throws Exception
     */
    public function setTraslados(array $value) {
        if (Impuestos::validateTraslados($value))  {
            $this->traslados = $value;
        }
    }

    /**
     * @return array
     */
    public static function sampleTraslados(): array {
        return  array(
            Locale::sample() /*31:*/
        ); /* 31:traslados*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromLocales(array $value): array {
        return  array_map(function ($value) {
            return Locale::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toLocales(): array {
        if (Impuestos::validateLocales($this->locales))  {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->locales);
        }
        throw new Exception('never get to this Impuestos::locales');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateLocales(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Impuestos::locales");
        }
        array_walk($value, function($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @return array
     */
    public function getLocales(): array {
        return $this->locales;
    }

    /**
     * @param array
     * @throws Exception
     */
    public function setLocales(array $value) {
        if (Impuestos::validateLocales($value))  {
            $this->locales = $value;
        }
    }

    /**
     * @return array
     */
    public static function sampleLocales(): array {
        return  array(
            Locale::sample() /*32:*/
        ); /* 32:locales*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Impuestos::validateTraslados($this->traslados)
        || Impuestos::validateLocales($this->locales);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Traslados'} = $this->toTraslados();
        $out->{'Locales'} = $this->toLocales();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Impuestos
     * @throws Exception
     */
    public function from(stdClass $obj): Impuestos {
        Impuestos::validateTraslados($this->traslados, true);
        Impuestos::validateLocales($this->locales, true);
        return new Impuestos(
         Impuestos::fromTraslados($obj->{'Traslados'})
        ,Impuestos::fromLocales($obj->{'Locales'})
        );
    }

    /**
     * @return Impuestos
     */
    public static function sample(): Impuestos {
        return new Impuestos(
         Impuestos::sampleTraslados()
        ,Impuestos::sampleLocales()
        );
    }
}

// This is a autogenerated file:Locale

class Locale {
    private float $base; // json:Base Required
    private string $impuesto; // json:Impuesto Required
    private string $tipoFactor; // json:TipoFactor Required
    private string $tasaOCuota; // json:TasaOCuota Required
    private float $importe; // json:Importe Required

    /**
     * @param float $base
     * @param string $impuesto
     * @param string $tipoFactor
     * @param string $tasaOCuota
     * @param float $importe
     */
    public function __construct(float $base, string $impuesto, string $tipoFactor, string $tasaOCuota, float $importe) {
        $this->base = $base;
        $this->impuesto = $impuesto;
        $this->tipoFactor = $tipoFactor;
        $this->tasaOCuota = $tasaOCuota;
        $this->importe = $importe;
    }

    /**
     * @param float $value
     * @throws Exception
     * @return float
     */
    public static function fromBase(float $value): float {
        return $value; /*float*/
    }

    /**
     * @throws Exception
     * @return float
     */
    public function toBase(): float {
        if (Locale::validateBase($this->base))  {
            return $this->base; /*float*/
        }
        throw new Exception('never get to this Locale::base');
    }

    /**
     * @param float
     * @return bool
     * @throws Exception
     */
    public static function validateBase(float $value): bool {
        if (!is_float($value)) {
            throw new Exception("Attribute Error:Locale::base");
        }
        return true;
    }

    /**
     * @return float
     */
    public function getBase(): float {
        return $this->base;
    }

    /**
     * @param float
     * @throws Exception
     */
    public function setBase(float $value) {
        if (Locale::validateBase($value))  {
            $this->base = $value;
        }
    }

    /**
     * @return float
     */
    public static function sampleBase(): float {
        return 31.031; /*31:base*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromImpuesto(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toImpuesto(): string {
        if (Locale::validateImpuesto($this->impuesto))  {
            return $this->impuesto; /*string*/
        }
        throw new Exception('never get to this Locale::impuesto');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateImpuesto(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Locale::impuesto");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getImpuesto(): string {
        return $this->impuesto;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setImpuesto(string $value) {
        if (Locale::validateImpuesto($value))  {
            $this->impuesto = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleImpuesto(): string {
        return 'Locale::impuesto::32'; /*32:impuesto*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTipoFactor(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTipoFactor(): string {
        if (Locale::validateTipoFactor($this->tipoFactor))  {
            return $this->tipoFactor; /*string*/
        }
        throw new Exception('never get to this Locale::tipoFactor');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTipoFactor(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Locale::tipoFactor");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getTipoFactor(): string {
        return $this->tipoFactor;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setTipoFactor(string $value) {
        if (Locale::validateTipoFactor($value))  {
            $this->tipoFactor = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleTipoFactor(): string {
        return 'Locale::tipoFactor::33'; /*33:tipoFactor*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTasaOCuota(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTasaOCuota(): string {
        if (Locale::validateTasaOCuota($this->tasaOCuota))  {
            return $this->tasaOCuota; /*string*/
        }
        throw new Exception('never get to this Locale::tasaOCuota');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTasaOCuota(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Locale::tasaOCuota");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getTasaOCuota(): string {
        return $this->tasaOCuota;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setTasaOCuota(string $value) {
        if (Locale::validateTasaOCuota($value))  {
            $this->tasaOCuota = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleTasaOCuota(): string {
        return 'Locale::tasaOCuota::34'; /*34:tasaOCuota*/
    }

    /**
     * @param float $value
     * @throws Exception
     * @return float
     */
    public static function fromImporte(float $value): float {
        return $value; /*float*/
    }

    /**
     * @throws Exception
     * @return float
     */
    public function toImporte(): float {
        if (Locale::validateImporte($this->importe))  {
            return $this->importe; /*float*/
        }
        throw new Exception('never get to this Locale::importe');
    }

    /**
     * @param float
     * @return bool
     * @throws Exception
     */
    public static function validateImporte(float $value): bool {
        if (!is_float($value)) {
            throw new Exception("Attribute Error:Locale::importe");
        }
        return true;
    }

    /**
     * @return float
     */
    public function getImporte(): float {
        return $this->importe;
    }

    /**
     * @param float
     * @throws Exception
     */
    public function setImporte(float $value) {
        if (Locale::validateImporte($value))  {
            $this->importe = $value;
        }
    }

    /**
     * @return float
     */
    public static function sampleImporte(): float {
        return 35.035; /*35:importe*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Locale::validateBase($this->base)
        || Locale::validateImpuesto($this->impuesto)
        || Locale::validateTipoFactor($this->tipoFactor)
        || Locale::validateTasaOCuota($this->tasaOCuota)
        || Locale::validateImporte($this->importe);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Base'} = $this->toBase();
        $out->{'Impuesto'} = $this->toImpuesto();
        $out->{'TipoFactor'} = $this->toTipoFactor();
        $out->{'TasaOCuota'} = $this->toTasaOCuota();
        $out->{'Importe'} = $this->toImporte();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Locale
     * @throws Exception
     */
    public function from(stdClass $obj): Locale {
        Locale::validateBase($this->base, true);
        Locale::validateImpuesto($this->impuesto, true);
        Locale::validateTipoFactor($this->tipoFactor, true);
        Locale::validateTasaOCuota($this->tasaOCuota, true);
        Locale::validateImporte($this->importe, true);
        return new Locale(
         Locale::fromBase($obj->{'Base'})
        ,Locale::fromImpuesto($obj->{'Impuesto'})
        ,Locale::fromTipoFactor($obj->{'TipoFactor'})
        ,Locale::fromTasaOCuota($obj->{'TasaOCuota'})
        ,Locale::fromImporte($obj->{'Importe'})
        );
    }

    /**
     * @return Locale
     */
    public static function sample(): Locale {
        return new Locale(
         Locale::sampleBase()
        ,Locale::sampleImpuesto()
        ,Locale::sampleTipoFactor()
        ,Locale::sampleTasaOCuota()
        ,Locale::sampleImporte()
        );
    }
}

// This is a autogenerated file:Receptor

class Receptor {
    private string $uid; // json:UID Required

    /**
     * @param string $uid
     */
    public function __construct(string $uid) {
        $this->uid = $uid;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromUid(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toUid(): string {
        if (Receptor::validateUid($this->uid))  {
            return $this->uid; /*string*/
        }
        throw new Exception('never get to this Receptor::uid');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateUid(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Receptor::uid");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getUid(): string {
        return $this->uid;
    }

    /**
     * @param string
     * @throws Exception
     */
    public function setUid(string $value) {
        if (Receptor::validateUid($value))  {
            $this->uid = $value;
        }
    }

    /**
     * @return string
     */
    public static function sampleUid(): string {
        return 'Receptor::uid::31'; /*31:uid*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Receptor::validateUid($this->uid);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'UID'} = $this->toUid();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Receptor
     * @throws Exception
     */
    public function from(stdClass $obj): Receptor {
        Receptor::validateUid($this->uid, true);
        return new Receptor(
         Receptor::fromUid($obj->{'UID'})
        );
    }

    /**
     * @return Receptor
     */
    public static function sample(): Receptor {
        return new Receptor(
         Receptor::sampleUid()
        );
    }
}
?>
