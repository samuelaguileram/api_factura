<?php

// This is a autogenerated file:Producto

class Producto {
    private ?string $code; // json:code Optional
    private ?string $name; // json:name Optional
    private ?string $price; // json:price Optional
    private ?int $clavePS; // json:clavePS Optional
    private ?string $unity; // json:unity Optional
    private ?string $claveUnity; // json:claveUnity Optional

    /**
     * @param string|null $code
     * @param string|null $name
     * @param string|null $price
     * @param int|null $clavePS
     * @param string|null $unity
     * @param string|null $claveUnity
     */
    public function __construct(?string $code, ?string $name, ?string $price, ?int $clavePS, ?string $unity, ?string $claveUnity) {
        $this->code = $code;
        $this->name = $name;
        $this->price = $price;
        $this->clavePS = $clavePS;
        $this->unity = $unity;
        $this->claveUnity = $claveUnity;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromCode(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toCode(): ?string {
        if (Producto::validateCode($this->code))  {
            if (!is_null($this->code)) {
                return $this->code; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::code');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateCode(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Producto::code");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getCode(): ?string {
        return $this->code;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setCode(?string $value) {
        if (Producto::validateCode($value))  {
            $this->code = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleCode(): ?string {
        return 'Producto::code::31'; /*31:code*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromName(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toName(): ?string {
        if (Producto::validateName($this->name))  {
            if (!is_null($this->name)) {
                return $this->name; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::name');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateName(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Producto::name");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getName(): ?string {
        return $this->name;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setName(?string $value) {
        if (Producto::validateName($value))  {
            $this->name = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleName(): ?string {
        return 'Producto::name::32'; /*32:name*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromPrice(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toPrice(): ?string {
        if (Producto::validatePrice($this->price))  {
            if (!is_null($this->price)) {
                return $this->price; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::price');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validatePrice(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Producto::price");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getPrice(): ?string {
        return $this->price;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setPrice(?string $value) {
        if (Producto::validatePrice($value))  {
            $this->price = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function samplePrice(): ?string {
        return 'Producto::price::33'; /*33:price*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromClavePS(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toClavePS(): ?int {
        if (Producto::validateClavePS($this->clavePS))  {
            if (!is_null($this->clavePS)) {
                return $this->clavePS; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::clavePS');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateClavePS(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:Producto::clavePS");
            }
        }
        return true;
    }

    /**
     * @return ?int
     */
    public function getClavePS(): ?int {
        return $this->clavePS;
    }

    /**
     * @param int|null
     * @throws Exception
     */
    public function setClavePS(?int $value) {
        if (Producto::validateClavePS($value))  {
            $this->clavePS = $value;
        }
    }

    /**
     * @return ?int
     */
    public static function sampleClavePS(): ?int {
        return 34; /*34:clavePS*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromUnity(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toUnity(): ?string {
        if (Producto::validateUnity($this->unity))  {
            if (!is_null($this->unity)) {
                return $this->unity; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::unity');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateUnity(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Producto::unity");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getUnity(): ?string {
        return $this->unity;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setUnity(?string $value) {
        if (Producto::validateUnity($value))  {
            $this->unity = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleUnity(): ?string {
        return 'Producto::unity::35'; /*35:unity*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromClaveUnity(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toClaveUnity(): ?string {
        if (Producto::validateClaveUnity($this->claveUnity))  {
            if (!is_null($this->claveUnity)) {
                return $this->claveUnity; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Producto::claveUnity');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateClaveUnity(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Producto::claveUnity");
            }
        }
        return true;
    }

    /**
     * @return ?string
     */
    public function getClaveUnity(): ?string {
        return $this->claveUnity;
    }

    /**
     * @param string|null
     * @throws Exception
     */
    public function setClaveUnity(?string $value) {
        if (Producto::validateClaveUnity($value))  {
            $this->claveUnity = $value;
        }
    }

    /**
     * @return ?string
     */
    public static function sampleClaveUnity(): ?string {
        return 'Producto::claveUnity::36'; /*36:claveUnity*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Producto::validateCode($this->code)
        || Producto::validateName($this->name)
        || Producto::validatePrice($this->price)
        || Producto::validateClavePS($this->clavePS)
        || Producto::validateUnity($this->unity)
        || Producto::validateClaveUnity($this->claveUnity);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'code'} = $this->toCode();
        $out->{'name'} = $this->toName();
        $out->{'price'} = $this->toPrice();
        $out->{'clavePS'} = $this->toClavePS();
        $out->{'unity'} = $this->toUnity();
        $out->{'claveUnity'} = $this->toClaveUnity();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Producto
     * @throws Exception
     */
    public function from(stdClass $obj): Producto {
        Producto::validateCode($this->code, true);
        Producto::validateName($this->name, true);
        Producto::validatePrice($this->price, true);
        Producto::validateClavePS($this->clavePS, true);
        Producto::validateUnity($this->unity, true);
        Producto::validateClaveUnity($this->claveUnity, true);
        return new Producto(
         Producto::fromCode($obj->{'code'})
        ,Producto::fromName($obj->{'name'})
        ,Producto::fromPrice($obj->{'price'})
        ,Producto::fromClavePS($obj->{'clavePS'})
        ,Producto::fromUnity($obj->{'unity'})
        ,Producto::fromClaveUnity($obj->{'claveUnity'})
        );
    }

    /**
     * @return Producto
     */
    public static function sample(): Producto {
        return new Producto(
         Producto::sampleCode()
        ,Producto::sampleName()
        ,Producto::samplePrice()
        ,Producto::sampleClavePS()
        ,Producto::sampleUnity()
        ,Producto::sampleClaveUnity()
        );
    }
}
?>
